{"version":3,"sources":["../../src/use-tooltip.ts"],"names":["useTooltip","props","openDelay","closeDelay","closeOnClick","closeOnMouseDown","onOpenProp","onOpen","onCloseProp","onClose","placement","id","isOpenProp","isOpen","defaultIsOpen","arrowSize","arrowShadowColor","arrowPadding","modifiers","isDisabled","gutter","offset","htmlProps","popper","tooltipId","ref","enterTimeout","exitTimeout","openWithDelay","current","window","setTimeout","closeWithDelay","clearTimeout","onClick","onMouseDown","onKeyDown","event","key","getTriggerProps","_ref","triggerProps","onMouseEnter","onFocus","onBlur","undefined","getReferenceProps","getTooltipProps","tooltipProps","role","getTooltipWrapperProps","getPopperProps","style","transformOrigin","show","hide","getArrowWrapperProps","getArrowProps"],"mappings":";;;;;AAAA;;AACA;;AACA;;AAMA;;;;;;AA0DO,SAASA,UAAT,CAAoBC,KAApB,EAAiD;AAAA,MAA7BA,KAA6B;AAA7BA,IAAAA,KAA6B,GAAJ,EAAI;AAAA;;AAAA,eAoBlDA,KApBkD;AAAA,gCAEpDC,SAFoD;AAAA,MAEpDA,SAFoD,iCAExC,CAFwC;AAAA,iCAGpDC,UAHoD;AAAA,MAGpDA,UAHoD,kCAGvC,CAHuC;AAAA,mCAIpDC,YAJoD;AAAA,MAIpDA,YAJoD,oCAIrC,IAJqC;AAAA,MAKpDC,gBALoD,UAKpDA,gBALoD;AAAA,MAM5CC,UAN4C,UAMpDC,MANoD;AAAA,MAO3CC,WAP2C,UAOpDC,OAPoD;AAAA,MAQpDC,SARoD,UAQpDA,SARoD;AAAA,MASpDC,EAToD,UASpDA,EAToD;AAAA,MAU5CC,UAV4C,UAUpDC,MAVoD;AAAA,MAWpDC,aAXoD,UAWpDA,aAXoD;AAAA,gCAYpDC,SAZoD;AAAA,MAYpDA,SAZoD,iCAYxC,EAZwC;AAAA,MAapDC,gBAboD,UAapDA,gBAboD;AAAA,MAcpDC,YAdoD,UAcpDA,YAdoD;AAAA,MAepDC,SAfoD,UAepDA,SAfoD;AAAA,MAgBpDC,UAhBoD,UAgBpDA,UAhBoD;AAAA,MAiBpDC,MAjBoD,UAiBpDA,MAjBoD;AAAA,MAkBpDC,MAlBoD,UAkBpDA,MAlBoD;AAAA,MAmBjDC,SAnBiD;;AAAA,uBAsBlB,0BAAc;AAChDT,IAAAA,MAAM,EAAED,UADwC;AAEhDE,IAAAA,aAAa,EAAbA,aAFgD;AAGhDP,IAAAA,MAAM,EAAED,UAHwC;AAIhDG,IAAAA,OAAO,EAAED;AAJuC,GAAd,CAtBkB;AAAA,MAsB9CK,MAtB8C,kBAsB9CA,MAtB8C;AAAA,MAsBtCN,MAtBsC,kBAsBtCA,MAtBsC;AAAA,MAsB9BE,OAtB8B,kBAsB9BA,OAtB8B;;AA6BtD,MAAMc,MAAM,GAAG,uBAAU;AACvBb,IAAAA,SAAS,EAATA,SADuB;AAEvBK,IAAAA,SAAS,EAATA,SAFuB;AAGvBC,IAAAA,gBAAgB,EAAhBA,gBAHuB;AAIvBC,IAAAA,YAAY,EAAZA,YAJuB;AAKvBC,IAAAA,SAAS,EAATA,SALuB;AAMvBE,IAAAA,MAAM,EAANA,MANuB;AAOvBC,IAAAA,MAAM,EAANA;AAPuB,GAAV,CAAf;AAUA,MAAMG,SAAS,GAAG,kBAAMb,EAAN,EAAU,SAAV,CAAlB;AAEA,MAAMc,GAAG,GAAG,mBAAY,IAAZ,CAAZ;AAEA,MAAMC,YAAY,GAAG,oBAArB;AACA,MAAMC,WAAW,GAAG,oBAApB;AAEA,MAAMC,aAAa,GAAG,wBAAY,YAAM;AACtC,QAAI,CAACT,UAAL,EAAiB;AACfO,MAAAA,YAAY,CAACG,OAAb,GAAuBC,MAAM,CAACC,UAAP,CAAkBxB,MAAlB,EAA0BL,SAA1B,CAAvB;AACD;AACF,GAJqB,EAInB,CAACiB,UAAD,EAAaZ,MAAb,EAAqBL,SAArB,CAJmB,CAAtB;AAMA,MAAM8B,cAAc,GAAG,wBAAY,YAAM;AACvC,QAAIN,YAAY,CAACG,OAAjB,EAA0B;AACxBI,MAAAA,YAAY,CAACP,YAAY,CAACG,OAAd,CAAZ;AACD;;AACDF,IAAAA,WAAW,CAACE,OAAZ,GAAsBC,MAAM,CAACC,UAAP,CAAkBtB,OAAlB,EAA2BN,UAA3B,CAAtB;AACD,GALsB,EAKpB,CAACA,UAAD,EAAaM,OAAb,CALoB,CAAvB;AAOA,MAAMyB,OAAO,GAAG,wBAAY,YAAM;AAChC,QAAI9B,YAAJ,EAAkB;AAChB4B,MAAAA,cAAc;AACf;AACF,GAJe,EAIb,CAAC5B,YAAD,EAAe4B,cAAf,CAJa,CAAhB;AAMA,MAAMG,WAAW,GAAG,wBAAY,YAAM;AACpC,QAAI9B,gBAAJ,EAAsB;AACpB2B,MAAAA,cAAc;AACf;AACF,GAJmB,EAIjB,CAAC3B,gBAAD,EAAmB2B,cAAnB,CAJiB,CAApB;;AAMA,MAAMI,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAA0B;AAC1C,QAAIxB,MAAM,IAAIwB,KAAK,CAACC,GAAN,KAAc,QAA5B,EAAsC;AACpCN,MAAAA,cAAc;AACf;AACF,GAJD;;AAMA,+BAAiB,SAAjB,EAA4BI,SAA5B;AAEA,wBAAU,YAAM;AACd,WAAO,YAAM;AACXH,MAAAA,YAAY,CAACP,YAAY,CAACG,OAAd,CAAZ;AACAI,MAAAA,YAAY,CAACN,WAAW,CAACE,OAAb,CAAZ;AACD,KAHD;AAID,GALD,EAKG,EALH;AAOA;AACF;AACA;AACA;AACA;AACA;;AACE,+BAAiB,YAAjB,EAA+BG,cAA/B,EAA+CP,GAAG,CAACI,OAAnD;;AAEA,MAAMU,eAA2B,GAAG,SAA9BA,eAA8B,CAACtC,KAAD,EAAauC,IAAb,EAA6B;AAAA,QAA5BvC,KAA4B;AAA5BA,MAAAA,KAA4B,GAApB,EAAoB;AAAA;;AAAA,QAAhBuC,IAAgB;AAAhBA,MAAAA,IAAgB,GAAT,IAAS;AAAA;;AAC/D,QAAMC,YAAY,gBACbxC,KADa;AAEhByC,MAAAA,YAAY,EAAE,4BAAgBzC,KAAK,CAACyC,YAAtB,EAAoCd,aAApC,CAFE;AAGhBM,MAAAA,OAAO,EAAE,4BAAgBjC,KAAK,CAACiC,OAAtB,EAA+BA,OAA/B,CAHO;AAIhBC,MAAAA,WAAW,EAAE,4BAAgBlC,KAAK,CAACkC,WAAtB,EAAmCA,WAAnC,CAJG;AAKhBQ,MAAAA,OAAO,EAAE,4BAAgB1C,KAAK,CAAC0C,OAAtB,EAA+Bf,aAA/B,CALO;AAMhBgB,MAAAA,MAAM,EAAE,4BAAgB3C,KAAK,CAAC2C,MAAtB,EAA8BZ,cAA9B,CANQ;AAOhB,0BAAoBnB,MAAM,GAAGW,SAAH,GAAeqB;AAPzB,MAAlB;;AAUA,WAAOtB,MAAM,CAACuB,iBAAP,CAAyBL,YAAzB,EAAuC,sBAAUhB,GAAV,EAAee,IAAf,CAAvC,CAAP;AACD,GAZD;;AAcA,MAAMO,eAA2B,GAAG,SAA9BA,eAA8B,CAAC9C,KAAD,EAAauC,IAAb,EAA6B;AAAA,QAA5BvC,KAA4B;AAA5BA,MAAAA,KAA4B,GAApB,EAAoB;AAAA;;AAAA,QAAhBuC,IAAgB;AAAhBA,MAAAA,IAAgB,GAAT,IAAS;AAAA;;AAC/D,QAAMQ,YAAY;AAChBvB,MAAAA,GAAG,EAAEe;AADW,OAEblB,SAFa,EAGbrB,KAHa;AAIhBU,MAAAA,EAAE,EAAEa,SAJY;AAKhByB,MAAAA,IAAI,EAAE;AALU,MAAlB;;AAQA,WAAOD,YAAP;AACD,GAVD;;AAYA,MAAME,sBAAkC,GAAG,SAArCA,sBAAqC,CAACjD,KAAD,EAAauC,IAAb;AAAA,QAACvC,KAAD;AAACA,MAAAA,KAAD,GAAS,EAAT;AAAA;;AAAA,QAAauC,IAAb;AAAaA,MAAAA,IAAb,GAAoB,IAApB;AAAA;;AAAA,WACzCjB,MAAM,CAAC4B,cAAP,CACE,sBAAUlD,KAAV,EAAiB;AACfmD,MAAAA,KAAK,EAAE;AAAEC,QAAAA,eAAe,EAAE9B,MAAM,CAAC8B;AAA1B;AADQ,KAAjB,CADF,EAIEb,IAJF,CADyC;AAAA,GAA3C;;AAQA,SAAO;AACL3B,IAAAA,MAAM,EAANA,MADK;AAELyC,IAAAA,IAAI,EAAE1B,aAFD;AAGL2B,IAAAA,IAAI,EAAEvB,cAHD;AAILO,IAAAA,eAAe,EAAfA,eAJK;AAKLQ,IAAAA,eAAe,EAAfA,eALK;AAMLG,IAAAA,sBAAsB,EAAtBA,sBANK;AAOLG,IAAAA,eAAe,EAAE9B,MAAM,CAAC8B,eAPnB;AAQL3C,IAAAA,SAAS,EAAEa,MAAM,CAACb,SARb;AASL8C,IAAAA,oBAAoB,EAAEjC,MAAM,CAACiC,oBATxB;AAULC,IAAAA,aAAa,EAAElC,MAAM,CAACkC;AAVjB,GAAP;AAYD","sourcesContent":["import { useDisclosure, useEventListener, useId } from \"@chakra-ui/hooks\"\nimport { Placement, usePopper, UsePopperProps } from \"@chakra-ui/popper\"\nimport {\n  callAllHandlers,\n  mergeRefs,\n  mergeWith,\n  PropGetter,\n} from \"@chakra-ui/utils\"\nimport { useCallback, useEffect, useRef } from \"react\"\n\nexport interface UseTooltipProps\n  extends Pick<\n    UsePopperProps,\n    | \"arrowSize\"\n    | \"modifiers\"\n    | \"gutter\"\n    | \"offset\"\n    | \"arrowShadowColor\"\n    | \"arrowPadding\"\n  > {\n  /**\n   * Delay (in ms) before showing the tooltip\n   * @default 0ms\n   */\n  openDelay?: number\n  /**\n   * Delay (in ms) before hiding the tooltip\n   * @default 0ms\n   */\n  closeDelay?: number\n  /**\n   * If `true`, the tooltip will hide on click\n   */\n  closeOnClick?: boolean\n  /**\n   * If `true`, the tooltip will hide while the mouse\n   * is down\n   */\n  closeOnMouseDown?: boolean\n  /**\n   * Callback to run when the tooltip shows\n   */\n  onOpen?(): void\n  /**\n   * Callback to run when the tooltip hides\n   */\n  onClose?(): void\n  /**\n   * The Popper.js placement of the tooltip\n   */\n  placement?: Placement\n  /**\n   * Custom `id` to use in place of `uuid`\n   */\n  id?: string\n  /**\n   * If `true`, the tooltip will be shown (in controlled mode)\n   */\n  isOpen?: boolean\n  /**\n   * If `true`, the tooltip will be initially shown\n   */\n  defaultIsOpen?: boolean\n  isDisabled?: boolean\n}\n\nexport function useTooltip(props: UseTooltipProps = {}) {\n  const {\n    openDelay = 0,\n    closeDelay = 0,\n    closeOnClick = true,\n    closeOnMouseDown,\n    onOpen: onOpenProp,\n    onClose: onCloseProp,\n    placement,\n    id,\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    arrowSize = 10,\n    arrowShadowColor,\n    arrowPadding,\n    modifiers,\n    isDisabled,\n    gutter,\n    offset,\n    ...htmlProps\n  } = props\n\n  const { isOpen, onOpen, onClose } = useDisclosure({\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onOpen: onOpenProp,\n    onClose: onCloseProp,\n  })\n\n  const popper = usePopper({\n    placement,\n    arrowSize,\n    arrowShadowColor,\n    arrowPadding,\n    modifiers,\n    gutter,\n    offset,\n  })\n\n  const tooltipId = useId(id, \"tooltip\")\n\n  const ref = useRef<any>(null)\n\n  const enterTimeout = useRef<number>()\n  const exitTimeout = useRef<number>()\n\n  const openWithDelay = useCallback(() => {\n    if (!isDisabled) {\n      enterTimeout.current = window.setTimeout(onOpen, openDelay)\n    }\n  }, [isDisabled, onOpen, openDelay])\n\n  const closeWithDelay = useCallback(() => {\n    if (enterTimeout.current) {\n      clearTimeout(enterTimeout.current)\n    }\n    exitTimeout.current = window.setTimeout(onClose, closeDelay)\n  }, [closeDelay, onClose])\n\n  const onClick = useCallback(() => {\n    if (closeOnClick) {\n      closeWithDelay()\n    }\n  }, [closeOnClick, closeWithDelay])\n\n  const onMouseDown = useCallback(() => {\n    if (closeOnMouseDown) {\n      closeWithDelay()\n    }\n  }, [closeOnMouseDown, closeWithDelay])\n\n  const onKeyDown = (event: KeyboardEvent) => {\n    if (isOpen && event.key === \"Escape\") {\n      closeWithDelay()\n    }\n  }\n\n  useEventListener(\"keydown\", onKeyDown)\n\n  useEffect(() => {\n    return () => {\n      clearTimeout(enterTimeout.current)\n      clearTimeout(exitTimeout.current)\n    }\n  }, [])\n\n  /**\n   * This allows for catching mouseleave events when the tooltip\n   * trigger is disabled. There's currently a known issue in\n   * React regarding the onMouseLeave polyfill.\n   * @see https://github.com/facebook/react/issues/11972\n   */\n  useEventListener(\"mouseleave\", closeWithDelay, ref.current)\n\n  const getTriggerProps: PropGetter = (props = {}, _ref = null) => {\n    const triggerProps = {\n      ...props,\n      onMouseEnter: callAllHandlers(props.onMouseEnter, openWithDelay),\n      onClick: callAllHandlers(props.onClick, onClick),\n      onMouseDown: callAllHandlers(props.onMouseDown, onMouseDown),\n      onFocus: callAllHandlers(props.onFocus, openWithDelay),\n      onBlur: callAllHandlers(props.onBlur, closeWithDelay),\n      \"aria-describedby\": isOpen ? tooltipId : undefined,\n    }\n\n    return popper.getReferenceProps(triggerProps, mergeRefs(ref, _ref))\n  }\n\n  const getTooltipProps: PropGetter = (props = {}, _ref = null) => {\n    const tooltipProps = {\n      ref: _ref,\n      ...htmlProps,\n      ...props,\n      id: tooltipId,\n      role: \"tooltip\",\n    }\n\n    return tooltipProps\n  }\n\n  const getTooltipWrapperProps: PropGetter = (props = {}, _ref = null) =>\n    popper.getPopperProps(\n      mergeWith(props, {\n        style: { transformOrigin: popper.transformOrigin },\n      }),\n      _ref,\n    )\n\n  return {\n    isOpen,\n    show: openWithDelay,\n    hide: closeWithDelay,\n    getTriggerProps,\n    getTooltipProps,\n    getTooltipWrapperProps,\n    transformOrigin: popper.transformOrigin,\n    placement: popper.placement,\n    getArrowWrapperProps: popper.getArrowWrapperProps,\n    getArrowProps: popper.getArrowProps,\n  }\n}\n\nexport type UseTooltipReturn = ReturnType<typeof useTooltip>\n"],"file":"use-tooltip.js"}