{"version":3,"sources":["../../src/use-tabs.ts"],"names":["useClickable","useDescendant","useDescendants","useControllableState","useId","useSafeLayoutEffect","callAllHandlers","createContext","getValidChildren","isUndefined","mergeRefs","normalizeEventKey","cloneElement","useCallback","useEffect","useRef","useState","useTabs","props","defaultIndex","onChange","index","isManual","isLazy","orientation","htmlProps","focusedIndex","setFocusedIndex","selectedIndex","setSelectedIndex","defaultValue","value","propsMap","enabledDomContext","domContext","id","TabsProvider","useTabsContext","name","errorMessage","useTabList","count","descendants","length","setIndex","tab","element","focus","onKeyDown","event","nextTab","prevTab","firstTab","lastTab","isHorizontal","isVertical","eventKey","keyMap","ArrowRight","ArrowLeft","ArrowDown","ArrowUp","Home","End","action","preventDefault","role","useTab","isDisabled","isFocusable","ref","enabledIndex","disabled","Boolean","focusable","context","current","isSelected","onClick","onFocus","isDisabledButFocusable","shouldSelect","clickable","type","makeTabId","tabIndex","undefined","makeTabPanelId","useTabPanels","validChildren","children","map","child","useTabPanel","hidden","useTabIndicator","rect","setRect","left","width","top","height","hasMeasured","setHasMeasured","tabRect","getBoundingClientRect","frameId","requestAnimationFrame","cancelAnimationFrame","position","transition"],"mappings":"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","sourcesContent":["import { useClickable, UseClickableProps } from \"@chakra-ui/clickable\"\nimport { useDescendant, useDescendants } from \"@chakra-ui/descendant\"\nimport {\n  useControllableState,\n  useId,\n  useSafeLayoutEffect,\n} from \"@chakra-ui/hooks\"\nimport {\n  callAllHandlers,\n  createContext,\n  Dict,\n  EventKeyMap,\n  getValidChildren,\n  isUndefined,\n  mergeRefs,\n  normalizeEventKey,\n} from \"@chakra-ui/utils\"\nimport {\n  ButtonHTMLAttributes,\n  cloneElement,\n  CSSProperties,\n  KeyboardEventHandler,\n  ReactElement,\n  ReactNode,\n  Ref,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\"\n\nexport interface UseTabsProps {\n  /**\n   * The orientation of the tab list.\n   */\n  orientation?: \"vertical\" | \"horizontal\"\n  /**\n   * If `true`, the tabs will be manually activated and\n   * display its panel by pressing Space or Enter.\n   *\n   * If `false`, the tabs will be automatically activated\n   * and their panel is displayed when they receive focus.\n   */\n  isManual?: boolean\n  /**\n   * Callback when the index (controlled or un-controlled) changes.\n   */\n  onChange?: (index: number) => void\n  /**\n   * The index of the selected tab (in controlled mode)\n   */\n  index?: number\n  /**\n   * The initial index of the selected tab (in uncontrolled mode)\n   */\n  defaultIndex?: number\n  /**\n   * The id of the tab\n   */\n  id?: string\n  /**\n   * Performance 🚀:\n   * If `true`, the TabPanel rendering will be deferred\n   * until it is open.\n   */\n  isLazy?: boolean\n}\n\n/**\n * Tabs hooks that provides all the states, and accessibility\n * helpers to keep all things working properly.\n *\n * It's returned object will be passed unto a Context Provider\n * so all child components can read from it.\n *\n * @see Docs https://chakra-ui.com/components/useTabs\n */\nexport function useTabs(props: UseTabsProps) {\n  const {\n    defaultIndex,\n    onChange,\n    index,\n    isManual,\n    isLazy,\n    orientation = \"horizontal\",\n    ...htmlProps\n  } = props\n\n  /**\n   * We use this to keep track of the index of the focused tab.\n   *\n   * Tabs can be automatically activated, this means selection follows focus.\n   * When we navigate with the arrow keys, we move focus and selection to next/prev tab\n   *\n   * Tabs can also be manually activated, this means selection does not follow focus.\n   * When we navigate with the arrow keys, we only move focus NOT selection. The user\n   * will need not manually activate the tab using `Enter` or `Space`.\n   *\n   * This is why we need to keep track of the `focusedIndex` and `selectedIndex`\n   */\n  const [focusedIndex, setFocusedIndex] = useState(defaultIndex ?? 0)\n\n  const [selectedIndex, setSelectedIndex] = useControllableState({\n    defaultValue: defaultIndex ?? 0,\n    value: index,\n    onChange,\n    propsMap: {\n      value: \"index\",\n      defaultValue: \"defaultIndex\",\n      onChange: \"onChange\",\n    },\n  })\n\n  /**\n   * Sync focused `index` with controlled `selectedIndex` (which is the `props.index`)\n   */\n  useEffect(() => {\n    if (!isUndefined(index)) {\n      setFocusedIndex(index)\n    }\n  }, [index])\n\n  /**\n   * Think of `useDescendants` as a register for the tab nodes.\n   *\n   * This manager is used to store only the tab nodes that are not disabled, and focusable.\n   * If we have the following code\n   *\n   * ```jsx\n   * <Tab>Tab 1</Tab>\n   * <Tab isDisabled>Tab 2</Tab>\n   * <Tab>Tab 3</Tab>\n   * ```\n   *\n   * The manager will only hold references to \"Tab 1\" and \"Tab 3\", since `Tab 2` is disabled\n   */\n  const enabledDomContext = useDescendants()\n\n  /**\n   * This manager is used to store all tab nodes whether disabled or not.\n   * If we have the following code\n   *\n   * ```jsx\n   * <Tab>Tab 1</Tab>\n   * <Tab isDisabled>Tab 2</Tab>\n   * <Tab>Tab 3</Tab>\n   * ```\n   *\n   * The manager will only hold references to \"Tab 1\", \"Tab 2\" \"Tab 3\".\n   *\n   * We need this for correct indexing of tabs in event a tab is disabled\n   */\n  const domContext = useDescendants()\n\n  /**\n   * generate a unique id or use user-provided id for\n   * the tabs widget\n   */\n  const id = useId(props.id, `tabs`)\n\n  return {\n    id,\n    selectedIndex,\n    focusedIndex,\n    setSelectedIndex,\n    setFocusedIndex,\n    isManual,\n    isLazy,\n    orientation,\n    enabledDomContext,\n    domContext,\n    htmlProps,\n  }\n}\n\nexport type UseTabsReturn = Omit<ReturnType<typeof useTabs>, \"htmlProps\">\n\nconst [TabsProvider, useTabsContext] = createContext<UseTabsReturn>({\n  name: \"TabsContext\",\n  errorMessage:\n    \"useTabsContext: `context` is undefined. Seems you forgot to wrap all tabs components within <Tabs />\",\n})\n\nexport { TabsProvider }\n\ntype Child = ReactElement<any>\n\nexport interface UseTabListProps {\n  children?: ReactNode\n  onKeyDown?: KeyboardEventHandler\n  ref?: Ref<any>\n}\n\n/**\n * Tabs hook to manage multiple tab buttons,\n * and ensures only one tab is selected per time.\n *\n * @param props props object for the tablist\n */\nexport function useTabList<P extends UseTabListProps>(props: P) {\n  const {\n    setFocusedIndex,\n    focusedIndex,\n    orientation,\n    enabledDomContext,\n  } = useTabsContext()\n\n  const count = enabledDomContext.descendants.length\n\n  /**\n   * Function to update the selected tab index\n   */\n  const setIndex = useCallback(\n    (index: number) => {\n      const tab = enabledDomContext.descendants[index]\n      if (tab?.element) {\n        tab.element.focus()\n        setFocusedIndex(index)\n      }\n    },\n    [enabledDomContext.descendants, setFocusedIndex],\n  )\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      const nextTab = () => setIndex((focusedIndex + 1) % count)\n      const prevTab = () => setIndex((focusedIndex - 1 + count) % count)\n      const firstTab = () => setIndex(0)\n      const lastTab = () => setIndex(count - 1)\n\n      const isHorizontal = orientation === \"horizontal\"\n      const isVertical = orientation === \"vertical\"\n\n      const eventKey = normalizeEventKey(event)\n      const keyMap: EventKeyMap = {\n        ArrowRight: () => isHorizontal && nextTab(),\n        ArrowLeft: () => isHorizontal && prevTab(),\n        ArrowDown: () => isVertical && nextTab(),\n        ArrowUp: () => isVertical && prevTab(),\n        Home: firstTab,\n        End: lastTab,\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        action(event)\n      }\n    },\n    [count, focusedIndex, orientation, setIndex],\n  )\n\n  return {\n    ...props,\n    role: \"tablist\",\n    \"aria-orientation\": orientation,\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n  }\n}\n\nexport type UseTabListReturn = ReturnType<typeof useTabList>\n\nexport interface UseTabOptions {\n  id?: string\n  isSelected?: boolean\n  panelId?: string\n  /**\n   * If `true`, the `Tab` won't be toggleable\n   */\n  isDisabled?: boolean\n}\n\nexport interface UseTabProps\n  extends Omit<UseClickableProps, \"color\">,\n    UseTabOptions {}\n\n/**\n * Tabs hook to manage each tab button.\n *\n * A tab can be disabled and focusable, or both,\n * hence the use of `useClickable` to handle this scenario\n */\nexport function useTab<P extends UseTabProps>(\n  props: P,\n): ButtonHTMLAttributes<any> {\n  const { isDisabled, isFocusable, ...htmlProps } = props\n\n  const {\n    setSelectedIndex,\n    isManual,\n    id,\n    setFocusedIndex,\n    enabledDomContext,\n    domContext,\n    selectedIndex,\n  } = useTabsContext()\n\n  const ref = useRef<HTMLElement>(null)\n\n  /**\n   * Think of `useDescendant` as the function that registers tab node\n   * to the `enabledDomContext`, and returns it's index.\n   *\n   * Tab is registered if it's enabled or focusable\n   */\n  const enabledIndex = useDescendant({\n    disabled: Boolean(isDisabled),\n    focusable: Boolean(isFocusable),\n    context: enabledDomContext,\n    element: ref.current,\n  })\n\n  /**\n   * Registers all tabs (whether disabled or not)\n   */\n  const index = useDescendant({\n    context: domContext,\n    element: ref.current,\n  })\n\n  const isSelected = index === selectedIndex\n\n  const onClick = () => {\n    setFocusedIndex(enabledIndex)\n    setSelectedIndex(index)\n  }\n\n  const onFocus = () => {\n    const isDisabledButFocusable = isDisabled && isFocusable\n    const shouldSelect = !isManual && !isDisabledButFocusable\n\n    if (shouldSelect) {\n      setSelectedIndex(index)\n    }\n  }\n\n  const clickable = useClickable({\n    ...htmlProps,\n    ref: mergeRefs(ref, props.ref),\n    isDisabled,\n    isFocusable,\n    onClick: callAllHandlers(props.onClick, onClick),\n  })\n\n  const type: \"button\" | \"submit\" | \"reset\" = \"button\"\n\n  return {\n    ...clickable,\n    id: makeTabId(id, index),\n    role: \"tab\",\n    tabIndex: isSelected ? 0 : -1,\n    type,\n    \"aria-selected\": isSelected ? true : undefined,\n    \"aria-controls\": makeTabPanelId(id, index),\n    onFocus: isDisabled ? undefined : callAllHandlers(props.onFocus, onFocus),\n  }\n}\n\nexport interface UseTabPanelsProps {\n  children?: ReactNode\n}\n\n/**\n * Tabs hook for managing the visibility of multiple tab panels.\n *\n * Since only one panel can be show at a time, we use `cloneElement`\n * to inject `selected` panel to each TabPanel.\n *\n * It returns a cloned version of it's children with\n * all functionality included.\n */\nexport function useTabPanels<P extends UseTabPanelsProps>(props: P) {\n  const context = useTabsContext()\n\n  const { id, selectedIndex } = context\n\n  const validChildren = getValidChildren(props.children)\n\n  const children = validChildren.map((child, index) =>\n    cloneElement(child as Child, {\n      isSelected: index === selectedIndex,\n      id: makeTabPanelId(id, index),\n    }),\n  )\n\n  return { ...props, children }\n}\n\n/**\n * Tabs hook for managing the visible/hidden states\n * of the tab panel.\n *\n * @param props props object for the tab panel\n */\nexport function useTabPanel(props: Dict) {\n  const { isSelected, id, ...htmlProps } = props\n  const { isLazy } = useTabsContext()\n\n  return {\n    ...htmlProps,\n    children: !isLazy || isSelected ? props.children : null,\n    role: \"tabpanel\",\n    hidden: !isSelected,\n    id,\n  }\n}\n\n/**\n * Tabs hook to show an animated indicators that\n * follows the active tab.\n *\n * The way we do it is by measuring the DOM Rect (or dimensions)\n * of the active tab, and return that as CSS style for\n * the indicator.\n */\nexport function useTabIndicator(): CSSProperties {\n  const context = useTabsContext()\n\n  const { selectedIndex, orientation, domContext } = context\n\n  const isHorizontal = orientation === \"horizontal\"\n  const isVertical = orientation === \"vertical\"\n\n  // Get the clientRect of the selected tab\n  const [rect, setRect] = useState(() => {\n    if (isHorizontal) return { left: 0, width: 0 }\n    if (isVertical) return { top: 0, height: 0 }\n    return undefined\n  })\n\n  const [hasMeasured, setHasMeasured] = useState(false)\n\n  // Update the selected tab rect when the selectedIndex changes\n  useSafeLayoutEffect(() => {\n    if (isUndefined(selectedIndex)) return undefined\n\n    const tab = domContext.descendants[selectedIndex]\n    const tabRect = tab?.element?.getBoundingClientRect()\n\n    // Horizontal Tab: Calculate width and left distance\n    if (isHorizontal && tabRect) {\n      const { left, width } = tabRect\n      setRect({ left, width })\n    }\n\n    // Vertical Tab: Calculate height and top distance\n    if (isVertical && tabRect) {\n      const { top, height } = tabRect\n      setRect({ top, height })\n    }\n\n    // Prevent unwanted transition from 0 to measured rect\n    // by setting the measured state in the next tick\n    const frameId = requestAnimationFrame(() => {\n      setHasMeasured(true)\n    })\n\n    return () => {\n      if (frameId) {\n        cancelAnimationFrame(frameId)\n      }\n    }\n  }, [selectedIndex, isHorizontal, isVertical, domContext.descendants])\n\n  return {\n    position: \"absolute\",\n    transition: hasMeasured ? \"all 200ms cubic-bezier(0, 0, 0.2, 1)\" : \"none\",\n    ...rect,\n  }\n}\n\nfunction makeTabId(id: string, index: number) {\n  return `${id}--tab-${index}`\n}\n\nfunction makeTabPanelId(id: string, index: number) {\n  return `${id}--tabpanel-${index}`\n}\n"],"file":"use-tabs.js"}