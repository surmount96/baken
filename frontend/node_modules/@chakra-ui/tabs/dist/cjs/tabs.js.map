{"version":3,"sources":["../../src/tabs.tsx"],"names":["Tabs","props","ref","styles","children","className","rest","htmlProps","ctx","context","React","useMemo","rootProps","__DEV__","displayName","Tab","tabProps","tabStyles","outline","display","alignItems","justifyContent","tab","TabList","tablistProps","tablistStyles","tablist","TabPanel","panelProps","tabpanel","TabPanels","panelsProps","TabIndicator","indicatorStyle","style","indicator"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  StylesProvider,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, omit, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport {\n  TabsProvider,\n  useTab,\n  useTabIndicator,\n  useTabList,\n  UseTabListProps,\n  UseTabOptions,\n  useTabPanel,\n  useTabPanels,\n  useTabs,\n  UseTabsProps,\n} from \"./use-tabs\"\n\ninterface TabsOptions {\n  /**\n   * If `true`, tabs will stretch to width of the tablist.\n   */\n  isFitted?: boolean\n  /**\n   * The alignment of the tabs\n   */\n  align?: \"start\" | \"end\" | \"center\"\n}\n\nexport interface TabsProps\n  extends UseTabsProps,\n    ThemingProps,\n    Omit<HTMLChakraProps<\"div\">, \"onChange\">,\n    TabsOptions {\n  children: React.ReactNode\n}\n\n/**\n * Tabs\n *\n * Provides context and logic for all tabs components. It doesn't render\n * any DOM node.\n */\nexport const Tabs = forwardRef<TabsProps, \"div\">(function Tabs(props, ref) {\n  const styles = useMultiStyleConfig(\"Tabs\", props)\n  const { children, className, ...rest } = omitThemingProps(props)\n\n  const { htmlProps, ...ctx } = useTabs(rest)\n  const context = React.useMemo(() => ctx, [ctx])\n\n  const rootProps = omit(htmlProps as any, [\"isFitted\"])\n\n  return (\n    <TabsProvider value={context}>\n      <StylesProvider value={styles}>\n        <chakra.div\n          className={cx(\"chakra-tabs\", className)}\n          ref={ref}\n          {...rootProps}\n        >\n          {children}\n        </chakra.div>\n      </StylesProvider>\n    </TabsProvider>\n  )\n})\n\nif (__DEV__) {\n  Tabs.displayName = \"Tabs\"\n}\n\nexport interface TabProps extends UseTabOptions, HTMLChakraProps<\"button\"> {}\n\n/**\n * Tab button used to activate a specific tab panel. It renders a `button`,\n * and is responsible for automatic and manual selection modes.\n */\nexport const Tab = forwardRef<TabProps, \"button\">(function Tab(props, ref) {\n  const styles = useStyles()\n  const tabProps = useTab({ ...props, ref })\n\n  const tabStyles: SystemStyleObject = {\n    outline: \"0\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    ...styles.tab,\n  }\n\n  return (\n    <chakra.button\n      {...tabProps}\n      className={cx(\"chakra-tabs__tab\", props.className)}\n      __css={tabStyles}\n    />\n  )\n})\n\nif (__DEV__) {\n  Tab.displayName = \"Tab\"\n}\n\nexport interface TabListProps\n  extends UseTabListProps,\n    Omit<HTMLChakraProps<\"div\">, \"onKeyDown\" | \"ref\"> {}\n\n/**\n * TabList is used to manage a list of tab buttons. It renders a `div` by default,\n * and is responsible the keyboard interaction between tabs.\n */\nexport const TabList = forwardRef<TabListProps, \"div\">(function TabList(\n  props,\n  ref,\n) {\n  const tablistProps = useTabList({ ...props, ref })\n\n  const styles = useStyles()\n\n  const tablistStyles: SystemStyleObject = {\n    display: \"flex\",\n    ...styles.tablist,\n  }\n\n  return (\n    <chakra.div\n      {...tablistProps}\n      className={cx(\"chakra-tabs__tablist\", props.className)}\n      __css={tablistStyles}\n    />\n  )\n})\n\nif (__DEV__) {\n  TabList.displayName = \"TabList\"\n}\n\nexport interface TabPanelProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * TabPanel\n * Used to render the content for a specific tab.\n */\nexport const TabPanel = forwardRef<TabPanelProps, \"div\">(function TabPanel(\n  props,\n  ref,\n) {\n  const panelProps = useTabPanel({ ...props, ref })\n  const styles = useStyles()\n\n  return (\n    <chakra.div\n      {...panelProps}\n      className={cx(\"chakra-tabs__tab-panel\", props.className)}\n      __css={styles.tabpanel}\n    />\n  )\n})\n\nif (__DEV__) {\n  TabPanel.displayName = \"TabPanel\"\n}\n\nexport interface TabPanelsProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * TabPanel\n *\n * Used to manage the rendering of multiple tab panels. It uses\n * `cloneElement` to hide/show tab panels.\n *\n * It renders a `div` by default.\n */\nexport const TabPanels = forwardRef<TabPanelsProps, \"div\">(function TabPanels(\n  props,\n  ref,\n) {\n  const panelsProps = useTabPanels(props)\n  return (\n    <chakra.div\n      {...panelsProps}\n      ref={ref}\n      className={cx(\"chakra-tabs__tab-panels\", props.className)}\n    />\n  )\n})\n\nif (__DEV__) {\n  TabPanels.displayName = \"TabPanels\"\n}\n\nexport interface TabIndicatorProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * TabIndicator\n *\n * Used to render an active tab indicator that animates between\n * selected tabs.\n */\nexport const TabIndicator = forwardRef<TabIndicatorProps, \"div\">(\n  function TabIndicator(props, ref) {\n    const indicatorStyle = useTabIndicator()\n    const style = {\n      ...props.style,\n      ...indicatorStyle,\n    }\n\n    const styles = useStyles()\n\n    return (\n      <chakra.div\n        ref={ref}\n        {...props}\n        className={cx(\"chakra-tabs__tab-indicator\", props.className)}\n        style={style}\n        __css={styles.indicator}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  TabIndicator.displayName = \"TabIndicator\"\n}\n"],"file":"tabs.js"}