{"version":3,"sources":["../../src/modal.tsx"],"names":["strict","name","errorMessage","ModalContextProvider","useModalContext","Modal","props","getContainer","children","autoFocus","trapFocus","initialFocusRef","finalFocusRef","returnFocusOnClose","blockScrollOnMount","allowPinchZoom","preserveScrollBarGap","motionPreset","styles","modal","context","isOpen","defaultProps","scrollBehavior","__DEV__","displayName","Motion","motion","div","ModalContent","ref","className","rest","getDialogProps","getDialogContainerProps","dialogProps","containerProps","_className","dialogStyles","display","flexDirection","position","width","outline","dialog","dialogContainerStyles","height","left","top","dialogContainer","ModalFocusScope","dialogRef","isPresent","safeToRemove","React","useEffect","setTimeout","ModalOverlay","overlayStyle","pos","w","h","overlay","fadeConfig","ModalHeader","headerId","setHeaderMounted","headerStyles","flex","header","ModalBody","bodyId","setBodyMounted","body","ModalFooter","footerStyles","alignItems","justifyContent","footer","ModalCloseButton","onClick","onClose","event","stopPropagation"],"mappings":"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","sourcesContent":["import { CloseButton, CloseButtonProps } from \"@chakra-ui/close-button\"\nimport { FocusLock } from \"@chakra-ui/focus-lock\"\nimport { Portal, PortalProps } from \"@chakra-ui/portal\"\nimport {\n  chakra,\n  ChakraProps,\n  forwardRef,\n  StylesProvider,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { fadeConfig } from \"@chakra-ui/transition\"\nimport {\n  callAllHandlers,\n  createContext,\n  cx,\n  FocusableElement,\n  __DEV__,\n} from \"@chakra-ui/utils\"\nimport {\n  AnimatePresence,\n  HTMLMotionProps,\n  motion,\n  usePresence,\n} from \"framer-motion\"\nimport * as React from \"react\"\nimport { RemoveScroll } from \"react-remove-scroll\"\nimport { ModalTransition } from \"./modal-transition\"\nimport { useModal, UseModalProps, UseModalReturn } from \"./use-modal\"\n\ninterface ModalOptions {\n  /**\n   * If `false`, focus lock will be disabled completely.\n   *\n   * This is useful in situations where you still need to interact with\n   * other surrounding elements.\n   *\n   * ðŸš¨Warning: We don't recommend doing this because it hurts the\n   * accessibility of the modal, based on WAI-ARIA specifications.\n   *\n   * @default true\n   */\n  trapFocus?: boolean\n  /**\n   * If `true`, the modal will autofocus the first enabled and interactive\n   * element within the `ModalContent`\n   *\n   * @default true\n   */\n  autoFocus?: boolean\n  /**\n   * The `ref` of element to receive focus when the modal opens.\n   */\n  initialFocusRef?: React.RefObject<FocusableElement>\n  /**\n   * The `ref` of element to receive focus when the modal closes.\n   */\n  finalFocusRef?: React.RefObject<FocusableElement>\n  /**\n   * If `true`, the modal will return focus to the element that triggered it when it closes.\n   * @default true\n   */\n  returnFocusOnClose?: boolean\n  /**\n   * If `true`, scrolling will be disabled on the `body` when the modal opens.\n   *  @default true\n   */\n  blockScrollOnMount?: boolean\n  /**\n   * Handle zoom/pinch gestures on iOS devices when scroll locking is enabled.\n   * Defaults to `false`.\n   */\n  allowPinchZoom?: boolean\n  /**\n   * If `true`, a `padding-right` will be applied to the body element\n   * that's equal to the width of the scrollbar.\n   *\n   * This can help prevent some unpleasant flickering effect\n   * and content adjustment when the modal opens\n   */\n  preserveScrollBarGap?: boolean\n}\n\ntype ScrollBehavior = \"inside\" | \"outside\"\n\ntype MotionPreset = \"slideInBottom\" | \"slideInRight\" | \"scale\"\n\nexport interface ModalProps extends UseModalProps, ModalOptions, ThemingProps {\n  children: React.ReactNode\n  /**\n   *  If `true`, the modal will be centered on screen.\n   * @default false\n   */\n  isCentered?: boolean\n  /**\n   * Where scroll behavior should originate.\n   * - If set to `inside`, scroll only occurs within the `ModalBody`.\n   * - If set to `outside`, the entire `ModalContent` will scroll within the viewport.\n   *\n   * @default \"outside\"\n   */\n  scrollBehavior?: ScrollBehavior\n  /**\n   * Function that will be called to get the parent element\n   * that the modal will be attached to.\n   */\n  getContainer?: PortalProps[\"getContainer\"]\n  /**\n   * The transition that should be used for the modal\n   */\n  motionPreset?: MotionPreset\n}\n\ninterface ModalContext extends ModalOptions, UseModalReturn {\n  /**\n   * The transition that should be used for the modal\n   */\n  motionPreset?: MotionPreset\n}\n\nconst [ModalContextProvider, useModalContext] = createContext<ModalContext>({\n  strict: true,\n  name: \"ModalContext\",\n  errorMessage:\n    \"useModalContext: `context` is undefined. Seems you forgot to wrap modal components in `<Modal />`\",\n})\n\nexport { ModalContextProvider, useModalContext }\n\n/**\n * Modal provides context, theming, and accessibility properties\n * to all other modal components.\n *\n * It doesn't render any DOM node.\n */\nexport const Modal: React.FC<ModalProps> = (props) => {\n  const {\n    getContainer,\n    children,\n    autoFocus,\n    trapFocus,\n    initialFocusRef,\n    finalFocusRef,\n    returnFocusOnClose,\n    blockScrollOnMount,\n    allowPinchZoom,\n    preserveScrollBarGap,\n    motionPreset,\n  } = props\n\n  const styles = useMultiStyleConfig(\"Modal\", props)\n  const modal = useModal(props)\n\n  const context = {\n    ...modal,\n    autoFocus,\n    trapFocus,\n    initialFocusRef,\n    finalFocusRef,\n    returnFocusOnClose,\n    blockScrollOnMount,\n    allowPinchZoom,\n    preserveScrollBarGap,\n    motionPreset,\n  }\n\n  return (\n    <ModalContextProvider value={context}>\n      <StylesProvider value={styles}>\n        <AnimatePresence>\n          {context.isOpen && (\n            <Portal getContainer={getContainer}>{children}</Portal>\n          )}\n        </AnimatePresence>\n      </StylesProvider>\n    </ModalContextProvider>\n  )\n}\n\nModal.defaultProps = {\n  returnFocusOnClose: true,\n  scrollBehavior: \"outside\",\n  trapFocus: true,\n  autoFocus: true,\n  blockScrollOnMount: true,\n  allowPinchZoom: false,\n  motionPreset: \"scale\",\n}\n\nif (__DEV__) {\n  Modal.displayName = \"Modal\"\n}\n\nexport interface ModalContentProps extends HTMLChakraProps<\"section\"> {}\n\nconst Motion = chakra(motion.div)\n\n/**\n * ModalContent is used to group modal's content. It has all the\n * necessary `aria-*` properties to indicate that it's a modal modal\n */\nexport const ModalContent = forwardRef<ModalContentProps, \"section\">(\n  function ModalContent(props, ref) {\n    const { className, children, ...rest } = props\n\n    const { getDialogProps, getDialogContainerProps } = useModalContext()\n\n    const dialogProps = getDialogProps(rest, ref) as any\n    const containerProps = getDialogContainerProps()\n\n    const _className = cx(\"chakra-modal__content\", className)\n\n    const styles = useStyles()\n\n    const dialogStyles: SystemStyleObject = {\n      display: \"flex\",\n      flexDirection: \"column\",\n      position: \"relative\",\n      width: \"100%\",\n      outline: 0,\n      ...styles.dialog,\n    }\n\n    const dialogContainerStyles: SystemStyleObject = {\n      display: \"flex\",\n      width: \"100vw\",\n      height: \"100vh\",\n      position: \"fixed\",\n      left: 0,\n      top: 0,\n      ...styles.dialogContainer,\n    }\n\n    const { motionPreset } = useModalContext()\n\n    return (\n      <ModalFocusScope>\n        <chakra.div\n          {...containerProps}\n          className=\"chakra-modal__content-container\"\n          __css={dialogContainerStyles}\n        >\n          <ModalTransition\n            preset={motionPreset}\n            className={_className}\n            {...dialogProps}\n            __css={dialogStyles}\n          >\n            {children}\n          </ModalTransition>\n        </chakra.div>\n      </ModalFocusScope>\n    )\n  },\n)\n\nif (__DEV__) {\n  ModalContent.displayName = \"ModalContent\"\n}\n\ninterface ModalFocusScopeProps {\n  children: React.ReactElement\n}\n\nexport function ModalFocusScope(props: ModalFocusScopeProps) {\n  const {\n    autoFocus,\n    trapFocus,\n    dialogRef,\n    initialFocusRef,\n    blockScrollOnMount,\n    allowPinchZoom,\n    finalFocusRef,\n    returnFocusOnClose,\n    preserveScrollBarGap,\n  } = useModalContext()\n\n  const [isPresent, safeToRemove] = usePresence()\n\n  React.useEffect(() => {\n    if (!isPresent && safeToRemove) {\n      setTimeout(safeToRemove)\n    }\n  }, [isPresent])\n\n  return (\n    <FocusLock\n      autoFocus={autoFocus}\n      isDisabled={!trapFocus}\n      initialFocusRef={initialFocusRef}\n      finalFocusRef={finalFocusRef}\n      restoreFocus={returnFocusOnClose}\n      contentRef={dialogRef}\n    >\n      <RemoveScroll\n        removeScrollBar={!preserveScrollBarGap}\n        allowPinchZoom={allowPinchZoom}\n        enabled={blockScrollOnMount}\n        forwardProps\n      >\n        {props.children}\n      </RemoveScroll>\n    </FocusLock>\n  )\n}\n\nexport interface ModalOverlayProps\n  extends Omit<HTMLMotionProps<\"div\">, \"color\">,\n    Omit<ChakraProps, \"transition\"> {\n  children?: React.ReactNode\n}\n\n/**\n * ModalOverlay renders a backdrop behind the modal. It's\n * also used as a wrapper for the modal content for better positioning.\n *\n * @see Docs https://chakra-ui.com/components/modal\n */\nexport const ModalOverlay = forwardRef<ModalOverlayProps, \"div\">(\n  function ModalOverlay(props, ref) {\n    const { className, ...rest } = props\n    const _className = cx(\"chakra-modal__overlay\", className)\n\n    const styles = useStyles()\n    const overlayStyle: SystemStyleObject = {\n      pos: \"fixed\",\n      left: \"0\",\n      top: \"0\",\n      w: \"100vw\",\n      h: \"100vh\",\n      ...styles.overlay,\n    }\n\n    return (\n      <Motion\n        {...fadeConfig}\n        __css={overlayStyle}\n        ref={ref}\n        className={_className}\n        {...rest}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  ModalOverlay.displayName = \"ModalOverlay\"\n}\n\nexport interface ModalHeaderProps extends HTMLChakraProps<\"header\"> {}\n\n/**\n * ModalHeader\n *\n * React component that houses the title of the modal.\n *\n * @see Docs https://chakra-ui.com/components/modal\n */\nexport const ModalHeader = forwardRef<ModalHeaderProps, \"header\">(\n  function ModalHeader(props, ref) {\n    const { className, ...rest } = props\n\n    const { headerId, setHeaderMounted } = useModalContext()\n\n    /**\n     * Notify us if this component was rendered or used\n     * so we can append `aria-labelledby` automatically\n     */\n    React.useEffect(() => {\n      setHeaderMounted(true)\n      return () => setHeaderMounted(false)\n    }, [setHeaderMounted])\n\n    const _className = cx(\"chakra-modal__header\", className)\n\n    const styles = useStyles()\n    const headerStyles: SystemStyleObject = {\n      flex: 0,\n      ...styles.header,\n    }\n\n    return (\n      <chakra.header\n        ref={ref}\n        className={_className}\n        id={headerId}\n        {...rest}\n        __css={headerStyles}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  ModalHeader.displayName = \"ModalHeader\"\n}\n\nexport interface ModalBodyProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * ModalBody\n *\n * React component that houses the main content of the modal.\n *\n * @see Docs https://chakra-ui.com/components/modal\n */\nexport const ModalBody = forwardRef<ModalBodyProps, \"div\">(function ModalBody(\n  props,\n  ref,\n) {\n  const { className, ...rest } = props\n  const { bodyId, setBodyMounted } = useModalContext()\n\n  /**\n   * Notify us if this component was rendered or used\n   * so we can append `aria-describedby` automatically\n   */\n  React.useEffect(() => {\n    setBodyMounted(true)\n    return () => setBodyMounted(false)\n  }, [setBodyMounted])\n\n  const _className = cx(\"chakra-modal__body\", className)\n  const styles = useStyles()\n\n  return (\n    <chakra.div\n      ref={ref}\n      className={_className}\n      id={bodyId}\n      {...rest}\n      __css={styles.body}\n    />\n  )\n})\n\nif (__DEV__) {\n  ModalBody.displayName = \"ModalBody\"\n}\n\nexport interface ModalFooterProps extends HTMLChakraProps<\"footer\"> {}\n\n/**\n * ModalFooter houses the action buttons of the modal.\n * @see Docs https://chakra-ui.com/components/modal\n */\nexport const ModalFooter = forwardRef<ModalFooterProps, \"footer\">(\n  function ModalFooter(props, ref) {\n    const { className, ...rest } = props\n    const _className = cx(\"chakra-modal__footer\", className)\n\n    const styles = useStyles()\n    const footerStyles: SystemStyleObject = {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"flex-end\",\n      ...styles.footer,\n    }\n\n    return (\n      <chakra.footer\n        ref={ref}\n        {...rest}\n        __css={footerStyles}\n        className={_className}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  ModalFooter.displayName = \"ModalFooter\"\n}\n\n/**\n * ModalCloseButton is used closes the modal.\n *\n * You don't need to pass the `onClick` to it, it's reads the\n * `onClose` action from the modal context.\n */\nexport const ModalCloseButton = forwardRef<CloseButtonProps, \"button\">(\n  function ModalCloseButton(props, ref) {\n    const { onClick, className, ...rest } = props\n    const { onClose } = useModalContext()\n\n    const _className = cx(\"chakra-modal__close-btn\", className)\n\n    return (\n      <CloseButton\n        ref={ref}\n        position=\"absolute\"\n        top=\"8px\"\n        right=\"12px\"\n        className={_className}\n        onClick={callAllHandlers(onClick, (event) => {\n          event.stopPropagation()\n          onClose()\n        })}\n        {...rest}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  ModalCloseButton.displayName = \"ModalCloseButton\"\n}\n"],"file":"modal.js"}