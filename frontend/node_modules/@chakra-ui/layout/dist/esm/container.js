function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { chakra, forwardRef, useTheme } from "@chakra-ui/system";
import { cx, filterUndefined, mapResponsive, memoizedGet as get, __DEV__ } from "@chakra-ui/utils";
import * as React from "react";

/**
 * Layout component used to wrap app or website content
 *
 * It sets `margin-left` and `margin-right` to `auto`,
 * to keep it's content centered.
 *
 * It also sets a default max-width of `60ch` (60 characters).
 */
export var Container = /*#__PURE__*/forwardRef(function Container(props, ref) {
  var {
    maxWidth,
    width,
    minWidth,
    w,
    minW,
    maxW,
    className,
    centerContent
  } = props,
      rest = _objectWithoutPropertiesLoose(props, ["maxWidth", "width", "minWidth", "w", "minW", "maxW", "className", "centerContent"]);

  var theme = useTheme();
  var widthProps = transform(theme, {
    maxW,
    maxWidth,
    width,
    w,
    minWidth,
    minW
  });

  var styles = _extends({
    w: "100%",
    mx: "auto",
    maxW: "60ch",
    px: "1rem"
  }, centerContent && {
    display: "flex",
    flexDirection: "column",
    alignItems: "center"
  }, widthProps);

  return /*#__PURE__*/React.createElement(chakra.div, _extends({
    ref: ref,
    className: cx("chakra-container", className)
  }, rest, {
    __css: styles
  }));
});

if (__DEV__) {
  Container.displayName = "Container";
}

function transform(theme, props) {
  var result = {};
  Object.keys(props).forEach(prop => {
    var propValue = props[prop];
    result[prop] = mapResponsive(propValue, value => get(theme, "sizes.container." + value, value));
  });
  return filterUndefined(result);
}
//# sourceMappingURL=container.js.map