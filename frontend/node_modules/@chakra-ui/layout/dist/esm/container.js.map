{"version":3,"sources":["../../src/container.tsx"],"names":["chakra","forwardRef","useTheme","cx","filterUndefined","mapResponsive","memoizedGet","get","__DEV__","React","Container","props","ref","maxWidth","width","minWidth","w","minW","maxW","className","centerContent","rest","theme","widthProps","transform","styles","mx","px","display","flexDirection","alignItems","displayName","result","Object","keys","forEach","prop","propValue","value"],"mappings":";;;;AAAA,SACEA,MADF,EAEEC,UAFF,EAIEC,QAJF,QAMO,mBANP;AAOA,SACEC,EADF,EAGEC,eAHF,EAIEC,aAJF,EAKEC,WAAW,IAAIC,GALjB,EAMEC,OANF,QAOO,kBAPP;AAQA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,SAAS,gBAAGT,UAAU,CAAwB,SAASS,SAAT,CACzDC,KADyD,EAEzDC,GAFyD,EAGzD;AACA,MAAM;AACJC,IAAAA,QADI;AAEJC,IAAAA,KAFI;AAGJC,IAAAA,QAHI;AAIJC,IAAAA,CAJI;AAKJC,IAAAA,IALI;AAMJC,IAAAA,IANI;AAOJC,IAAAA,SAPI;AAQJC,IAAAA;AARI,MAUFT,KAVJ;AAAA,MASKU,IATL,iCAUIV,KAVJ;;AAYA,MAAMW,KAAK,GAAGpB,QAAQ,EAAtB;AAEA,MAAMqB,UAAU,GAAGC,SAAS,CAACF,KAAD,EAAQ;AAClCJ,IAAAA,IADkC;AAElCL,IAAAA,QAFkC;AAGlCC,IAAAA,KAHkC;AAIlCE,IAAAA,CAJkC;AAKlCD,IAAAA,QALkC;AAMlCE,IAAAA;AANkC,GAAR,CAA5B;;AASA,MAAMQ,MAAyB;AAC7BT,IAAAA,CAAC,EAAE,MAD0B;AAE7BU,IAAAA,EAAE,EAAE,MAFyB;AAG7BR,IAAAA,IAAI,EAAE,MAHuB;AAI7BS,IAAAA,EAAE,EAAE;AAJyB,KAKzBP,aAAa,IAAI;AACnBQ,IAAAA,OAAO,EAAE,MADU;AAEnBC,IAAAA,aAAa,EAAE,QAFI;AAGnBC,IAAAA,UAAU,EAAE;AAHO,GALQ,EAU1BP,UAV0B,CAA/B;;AAaA,sBACE,oBAAC,MAAD,CAAQ,GAAR;AACE,IAAA,GAAG,EAAEX,GADP;AAEE,IAAA,SAAS,EAAET,EAAE,CAAC,kBAAD,EAAqBgB,SAArB;AAFf,KAGME,IAHN;AAIE,IAAA,KAAK,EAAEI;AAJT,KADF;AAQD,CAhDkC,CAA5B;;AAkDP,IAAIjB,OAAJ,EAAa;AACXE,EAAAA,SAAS,CAACqB,WAAV,GAAwB,WAAxB;AACD;;AAED,SAASP,SAAT,CAAmBF,KAAnB,EAAgCX,KAAhC,EAA6C;AAC3C,MAAMqB,MAAyB,GAAG,EAAlC;AAEAC,EAAAA,MAAM,CAACC,IAAP,CAAYvB,KAAZ,EAAmBwB,OAAnB,CAA4BC,IAAD,IAAU;AACnC,QAAMC,SAAS,GAAG1B,KAAK,CAACyB,IAAD,CAAvB;AACAJ,IAAAA,MAAM,CAACI,IAAD,CAAN,GAAe/B,aAAa,CAACgC,SAAD,EAAaC,KAAD,IACtC/B,GAAG,CAACe,KAAD,uBAA2BgB,KAA3B,EAAoCA,KAApC,CADuB,CAA5B;AAGD,GALD;AAOA,SAAOlC,eAAe,CAAC4B,MAAD,CAAtB;AACD","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  SystemStyleObject,\n  useTheme,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport {\n  cx,\n  Dict,\n  filterUndefined,\n  mapResponsive,\n  memoizedGet as get,\n  __DEV__,\n} from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface ContainerProps extends HTMLChakraProps<\"div\"> {\n  /**\n   * If `true`, container will center it's children\n   * regardless of their width.\n   */\n  centerContent?: boolean\n}\n\n/**\n * Layout component used to wrap app or website content\n *\n * It sets `margin-left` and `margin-right` to `auto`,\n * to keep it's content centered.\n *\n * It also sets a default max-width of `60ch` (60 characters).\n */\nexport const Container = forwardRef<ContainerProps, \"div\">(function Container(\n  props,\n  ref,\n) {\n  const {\n    maxWidth,\n    width,\n    minWidth,\n    w,\n    minW,\n    maxW,\n    className,\n    centerContent,\n    ...rest\n  } = props\n\n  const theme = useTheme()\n\n  const widthProps = transform(theme, {\n    maxW,\n    maxWidth,\n    width,\n    w,\n    minWidth,\n    minW,\n  })\n\n  const styles: SystemStyleObject = {\n    w: \"100%\",\n    mx: \"auto\",\n    maxW: \"60ch\",\n    px: \"1rem\",\n    ...(centerContent && {\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n    }),\n    ...widthProps,\n  }\n\n  return (\n    <chakra.div\n      ref={ref}\n      className={cx(\"chakra-container\", className)}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nif (__DEV__) {\n  Container.displayName = \"Container\"\n}\n\nfunction transform(theme: Dict, props: Dict) {\n  const result: SystemStyleObject = {}\n\n  Object.keys(props).forEach((prop) => {\n    const propValue = props[prop]\n    result[prop] = mapResponsive(propValue, (value) =>\n      get(theme, `sizes.container.${value}`, value),\n    )\n  })\n\n  return filterUndefined(result)\n}\n"],"file":"container.js"}