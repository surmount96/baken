{"version":3,"sources":["../../src/providers.tsx"],"names":["useColorMode","css","createContext","memoizedGet","get","mergeWith","runIfFn","Global","ThemeContext","React","ThemeProvider","props","children","theme","outerTheme","useContext","mergedTheme","useTheme","Error","StylesProvider","useStyles","name","errorMessage","GlobalStyle","colorMode","styleObjectOrFn","globalStyles","undefined","styles"],"mappings":"AAAA,SAASA,YAAT,QAA6B,uBAA7B;AACA,SAASC,GAAT,QAAuC,0BAAvC;AACA,SACEC,aADF,EAGEC,WAAW,IAAIC,GAHjB,EAIEC,SAJF,EAKEC,OALF,QAMO,kBANP;AAOA,SAASC,MAAT,EAAgCC,YAAhC,QAAoD,eAApD;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AASA,OAAO,IAAMC,aAA2C,GAAIC,KAAD,IAAW;AACpE,MAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAsBF,KAA5B;AACA,MAAMG,UAAU,GAAGL,KAAK,CAACM,UAAN,CAAiBP,YAAjB,CAAnB;AACA,MAAMQ,WAAW,GAAGX,SAAS,CAAC,EAAD,EAAKS,UAAL,EAAiBD,KAAjB,CAA7B;AAEA,sBACE,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEG;AAA9B,KACGJ,QADH,CADF;AAKD,CAVM;AAYP,OAAO,SAASK,QAAT,GAA6C;AAClD,MAAMJ,KAAK,GAAGJ,KAAK,CAACM,UAAN,CACXP,YADW,CAAd;;AAGA,MAAI,CAACK,KAAL,EAAY;AACV,UAAMK,KAAK,CACT,2FADS,CAAX;AAGD;;AAED,SAAOL,KAAP;AACD;AAED,IAAM,CAACM,cAAD,EAAiBC,SAAjB,IAA8BlB,aAAa,CAA0B;AACzEmB,EAAAA,IAAI,EAAE,eADmE;AAEzEC,EAAAA,YAAY,EACV;AAHuE,CAA1B,CAAjD;AAMA,SAASH,cAAT,EAAyBC,SAAzB;AAEA;AACA;AACA;AACA;;AACA,OAAO,IAAMG,WAAW,GAAG,MAAM;AAC/B,MAAM;AAAEC,IAAAA;AAAF,MAAgBxB,YAAY,EAAlC;AACA,sBACE,oBAAC,MAAD;AACE,IAAA,MAAM,EAAGa,KAAD,IAAW;AACjB,UAAMY,eAAe,GAAGrB,GAAG,CAACS,KAAD,EAAQ,eAAR,CAA3B;AACA,UAAMa,YAAY,GAAGpB,OAAO,CAACmB,eAAD,EAAkB;AAAEZ,QAAAA,KAAF;AAASW,QAAAA;AAAT,OAAlB,CAA5B;AACA,UAAI,CAACE,YAAL,EAAmB,OAAOC,SAAP;AACnB,UAAMC,MAAM,GAAG3B,GAAG,CAACyB,YAAD,CAAH,CAAkBb,KAAlB,CAAf;AACA,aAAOe,MAAP;AACD;AAPH,IADF;AAWD,CAbM","sourcesContent":["import { useColorMode } from \"@chakra-ui/color-mode\"\nimport { css, SystemStyleObject } from \"@chakra-ui/styled-system\"\nimport {\n  createContext,\n  Dict,\n  memoizedGet as get,\n  mergeWith,\n  runIfFn,\n} from \"@chakra-ui/utils\"\nimport { Global, Interpolation, ThemeContext } from \"@emotion/core\"\nimport * as React from \"react\"\n\nexport interface ThemeProviderProps {\n  /**\n   * The theme to use for your application\n   */\n  theme: Dict\n}\n\nexport const ThemeProvider: React.FC<ThemeProviderProps> = (props) => {\n  const { children, theme } = props\n  const outerTheme = React.useContext(ThemeContext) as Dict\n  const mergedTheme = mergeWith({}, outerTheme, theme)\n\n  return (\n    <ThemeContext.Provider value={mergedTheme}>\n      {children}\n    </ThemeContext.Provider>\n  )\n}\n\nexport function useTheme<T extends object = Dict>() {\n  const theme = React.useContext(\n    (ThemeContext as unknown) as React.Context<T | undefined>,\n  )\n  if (!theme) {\n    throw Error(\n      \"useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />`\",\n    )\n  }\n\n  return theme\n}\n\nconst [StylesProvider, useStyles] = createContext<Dict<SystemStyleObject>>({\n  name: \"StylesContext\",\n  errorMessage:\n    \"useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` \",\n})\n\nexport { StylesProvider, useStyles }\n\n/**\n * Applies styles defined in `theme.styles.global` globally\n * using emotion's `Global` component\n */\nexport const GlobalStyle = () => {\n  const { colorMode } = useColorMode()\n  return (\n    <Global\n      styles={(theme) => {\n        const styleObjectOrFn = get(theme, \"styles.global\")\n        const globalStyles = runIfFn(styleObjectOrFn, { theme, colorMode })\n        if (!globalStyles) return undefined\n        const styles = css(globalStyles)(theme)\n        return styles as Interpolation\n      }}\n    />\n  )\n}\n"],"file":"providers.js"}