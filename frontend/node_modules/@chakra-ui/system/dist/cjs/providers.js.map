{"version":3,"sources":["../../src/providers.tsx"],"names":["ThemeProvider","props","children","theme","outerTheme","React","useContext","ThemeContext","mergedTheme","useTheme","Error","name","errorMessage","StylesProvider","useStyles","GlobalStyle","colorMode","styleObjectOrFn","globalStyles","undefined","styles"],"mappings":";;;;;;AAAA;;AACA;;AACA;;AAOA;;AACA;;;;;;AASO,IAAMA,aAA2C,GAAG,SAA9CA,aAA8C,CAACC,KAAD,EAAW;AAAA,MAC5DC,QAD4D,GACxCD,KADwC,CAC5DC,QAD4D;AAAA,MAClDC,KADkD,GACxCF,KADwC,CAClDE,KADkD;AAEpE,MAAMC,UAAU,GAAGC,KAAK,CAACC,UAAN,CAAiBC,kBAAjB,CAAnB;AACA,MAAMC,WAAW,GAAG,sBAAU,EAAV,EAAcJ,UAAd,EAA0BD,KAA1B,CAApB;AAEA,sBACE,oBAAC,kBAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAEK;AAA9B,KACGN,QADH,CADF;AAKD,CAVM;;;;AAYA,SAASO,QAAT,GAA6C;AAClD,MAAMN,KAAK,GAAGE,KAAK,CAACC,UAAN,CACXC,kBADW,CAAd;;AAGA,MAAI,CAACJ,KAAL,EAAY;AACV,UAAMO,KAAK,CACT,2FADS,CAAX;AAGD;;AAED,SAAOP,KAAP;AACD;;qBAEmC,0BAAuC;AACzEQ,EAAAA,IAAI,EAAE,eADmE;AAEzEC,EAAAA,YAAY,EACV;AAHuE,CAAvC,C;IAA7BC,c;IAAgBC,S;;;;;AAQvB;AACA;AACA;AACA;AACO,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AAAA,sBACT,8BADS;AAAA,MACvBC,SADuB,iBACvBA,SADuB;;AAE/B,sBACE,oBAAC,YAAD;AACE,IAAA,MAAM,EAAE,gBAACb,KAAD,EAAW;AACjB,UAAMc,eAAe,GAAG,wBAAId,KAAJ,EAAW,eAAX,CAAxB;AACA,UAAMe,YAAY,GAAG,oBAAQD,eAAR,EAAyB;AAAEd,QAAAA,KAAK,EAALA,KAAF;AAASa,QAAAA,SAAS,EAATA;AAAT,OAAzB,CAArB;AACA,UAAI,CAACE,YAAL,EAAmB,OAAOC,SAAP;AACnB,UAAMC,MAAM,GAAG,uBAAIF,YAAJ,EAAkBf,KAAlB,CAAf;AACA,aAAOiB,MAAP;AACD;AAPH,IADF;AAWD,CAbM","sourcesContent":["import { useColorMode } from \"@chakra-ui/color-mode\"\nimport { css, SystemStyleObject } from \"@chakra-ui/styled-system\"\nimport {\n  createContext,\n  Dict,\n  memoizedGet as get,\n  mergeWith,\n  runIfFn,\n} from \"@chakra-ui/utils\"\nimport { Global, Interpolation, ThemeContext } from \"@emotion/core\"\nimport * as React from \"react\"\n\nexport interface ThemeProviderProps {\n  /**\n   * The theme to use for your application\n   */\n  theme: Dict\n}\n\nexport const ThemeProvider: React.FC<ThemeProviderProps> = (props) => {\n  const { children, theme } = props\n  const outerTheme = React.useContext(ThemeContext) as Dict\n  const mergedTheme = mergeWith({}, outerTheme, theme)\n\n  return (\n    <ThemeContext.Provider value={mergedTheme}>\n      {children}\n    </ThemeContext.Provider>\n  )\n}\n\nexport function useTheme<T extends object = Dict>() {\n  const theme = React.useContext(\n    (ThemeContext as unknown) as React.Context<T | undefined>,\n  )\n  if (!theme) {\n    throw Error(\n      \"useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />`\",\n    )\n  }\n\n  return theme\n}\n\nconst [StylesProvider, useStyles] = createContext<Dict<SystemStyleObject>>({\n  name: \"StylesContext\",\n  errorMessage:\n    \"useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` \",\n})\n\nexport { StylesProvider, useStyles }\n\n/**\n * Applies styles defined in `theme.styles.global` globally\n * using emotion's `Global` component\n */\nexport const GlobalStyle = () => {\n  const { colorMode } = useColorMode()\n  return (\n    <Global\n      styles={(theme) => {\n        const styleObjectOrFn = get(theme, \"styles.global\")\n        const globalStyles = runIfFn(styleObjectOrFn, { theme, colorMode })\n        if (!globalStyles) return undefined\n        const styles = css(globalStyles)(theme)\n        return styles as Interpolation\n      }}\n    />\n  )\n}\n"],"file":"providers.js"}