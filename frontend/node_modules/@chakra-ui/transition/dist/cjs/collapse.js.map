{"version":3,"sources":["../../src/collapse.tsx"],"names":["variants","exit","props","animateOpacity","opacity","parseInt","startingHeight","height","transition","duration","ease","EASINGS","easeInOut","enter","endingHeight","Collapse","React","forwardRef","ref","isOpen","unmountOnExit","style","className","onAnimationComplete","rest","useState","ariaHidden","setAriaHidden","shouldExpand","custom","undefined","c","overflow","__DEV__","displayName"],"mappings":"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","sourcesContent":["import { cx, warn, __DEV__ } from \"@chakra-ui/utils\"\nimport { AnimatePresence, HTMLMotionProps, motion } from \"framer-motion\"\nimport * as React from \"react\"\nimport { EASINGS, MotionVariants } from \"./__utils\"\n\ntype CollapseVariants = MotionVariants<\"enter\" | \"exit\">\n\nconst variants: CollapseVariants = {\n  exit: (props: CollapseOptions) => ({\n    ...(props.animateOpacity && {\n      opacity: parseInt(props.startingHeight as string, 10) > 0 ? 1 : 0,\n    }),\n    height: props.startingHeight,\n    transition: { duration: 0.2, ease: EASINGS.easeInOut },\n  }),\n  enter: (props: CollapseOptions) => ({\n    ...(props.animateOpacity && {\n      opacity: 1,\n    }),\n    height: props.endingHeight,\n    transition: {\n      duration: 0.3,\n      ease: EASINGS.easeInOut,\n    },\n  }),\n}\n\nexport interface CollapseOptions {\n  /**\n   * If `true`, the opacity of the content will be animated\n   */\n  animateOpacity?: boolean\n  /**\n   * If `true`, the collapse will unmount when `in={false}` and animation is done\n   */\n  unmountOnExit?: boolean\n  /**\n   * If `true`, the content will be expanded\n   */\n  in?: boolean\n  /**\n   * The height you want the content in it's collapsed state. Set to `0` by default\n   */\n  startingHeight?: number | string\n  /**\n   * The height you want the content in it's expanded state. Set to `auto` by default\n   */\n  endingHeight?: number | string\n}\n\nexport type ICollapse = CollapseProps\n\nexport interface CollapseProps\n  extends HTMLMotionProps<\"div\">,\n    CollapseOptions {}\n\nexport const Collapse = React.forwardRef<HTMLDivElement, CollapseProps>(\n  function Collapse(props, ref) {\n    const {\n      in: isOpen,\n      unmountOnExit,\n      animateOpacity = true,\n      startingHeight = 0,\n      endingHeight = \"auto\",\n      style,\n      className,\n      onAnimationComplete,\n      ...rest\n    } = props\n\n    const [ariaHidden, setAriaHidden] = React.useState(() => {\n      // If it's open by default, no need to apply `aria-hidden`\n      if (isOpen) return false\n      // If startingHeight > 0, then content is partially visible\n      if (parseInt(props.startingHeight as string, 10) > 0) return false\n      // Else, the content is hidden\n      return true\n    })\n\n    /**\n     * Warn ðŸš¨: `startingHeight` and `unmountOnExit` are mutually exclusive\n     *\n     * If you specify a starting height, the collapsed needs to be mounted\n     * for the height to take effect.\n     */\n    if (startingHeight > 0 && unmountOnExit) {\n      warn(\n        `startingHeight and unmountOnExit are mutually exclusive. You can't use them together`,\n      )\n    }\n\n    const shouldExpand = unmountOnExit ? isOpen && unmountOnExit : true\n\n    const custom = { startingHeight, endingHeight, animateOpacity }\n\n    return (\n      <AnimatePresence initial={false} custom={custom}>\n        {shouldExpand && (\n          <motion.div\n            ref={ref}\n            aria-hidden={ariaHidden ? \"true\" : undefined}\n            onAnimationComplete={() => {\n              setAriaHidden((c) => !c)\n              onAnimationComplete?.()\n            }}\n            className={cx(\"chakra-collapse\", className)}\n            initial=\"exit\"\n            animate={isOpen || unmountOnExit ? \"enter\" : \"exit\"}\n            exit=\"exit\"\n            {...rest}\n            variants={variants}\n            style={{ overflow: \"hidden\", ...style }}\n            custom={custom}\n          />\n        )}\n      </AnimatePresence>\n    )\n  },\n)\n\nif (__DEV__) {\n  Collapse.displayName = \"Collapse\"\n}\n"],"file":"collapse.js"}