function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { useCounter } from "@chakra-ui/counter";
import { useBoolean, useEventListener } from "@chakra-ui/hooks";
import { ariaAttr, callAllHandlers, focus, isBrowser, isNull, maxSafeInteger, mergeRefs, minSafeInteger, normalizeEventKey } from "@chakra-ui/utils";
import { useCallback, useRef } from "react";
import { useSpinner } from "./use-spinner";
import { isFloatingPointNumericCharacter, isValidNumericKeyboardEvent } from "./utils";

/**
 * React hook that implements the WAI-ARIA Spin Button widget
 * and used to create numeric input fields.
 *
 * It returns prop getters you can use to build your own
 * custom number inputs.
 *
 * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.1/#spinbutton
 * @see Docs     https://www.chakra-ui.com/useNumberInput
 * @see WHATWG   https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number)
 */
export function useNumberInput(props) {
  if (props === void 0) {
    props = {};
  }

  var {
    focusInputOnChange = true,
    clampValueOnBlur = true,
    keepWithinRange = true,
    min = minSafeInteger,
    max = maxSafeInteger,
    step: stepProp = 1,
    isReadOnly,
    isDisabled,
    getAriaValueText,
    isInvalid,
    pattern = "[0-9]*(.[0-9]+)?",
    inputMode = "decimal",
    allowMouseWheel,
    id
  } = props,
      htmlProps = _objectWithoutPropertiesLoose(props, ["focusInputOnChange", "clampValueOnBlur", "keepWithinRange", "min", "max", "step", "isReadOnly", "isDisabled", "getAriaValueText", "isInvalid", "pattern", "inputMode", "allowMouseWheel", "id", "onChange", "precision"]);
  /**
   * Leverage the `useCounter` hook since it provides
   * the functionality to `increment`, `decrement` and `update`
   * counter values
   */


  var counter = useCounter(props);
  var {
    update: updateFn,
    increment: incrementFn,
    decrement: decrementFn
  } = counter;
  /**
   * Keep track of the focused state of the input,
   * so user can this to change the styles of the
   * `spinners`, maybe :)
   */

  var [isFocused, setFocused] = useBoolean();
  var inputRef = useRef(null);
  var isInteractive = !(isReadOnly || isDisabled);
  var increment = useCallback(function (step) {
    if (step === void 0) {
      step = stepProp;
    }

    if (isInteractive) {
      incrementFn(step);
    }
  }, [incrementFn, isInteractive, stepProp]);
  var decrement = useCallback(function (step) {
    if (step === void 0) {
      step = stepProp;
    }

    if (isInteractive) {
      decrementFn(step);
    }
  }, [decrementFn, isInteractive, stepProp]);
  /**
   * Leverage the `useSpinner` hook to spin the input's value
   * when long press on the up and down buttons.
   *
   * This leverages `setInterval` internally
   */

  var spinner = useSpinner(increment, decrement);
  /**
   * The `onChange` handler filters out any character typed
   * that isn't floating point compatible.
   */

  var onChange = useCallback(event => {
    var valueString = event.target.value.split("").filter(isFloatingPointNumericCharacter).join("");
    updateFn(valueString);
  }, [updateFn]);
  var onKeyDown = useCallback(event => {
    /**
     * only allow valid numeric keys
     */
    if (!isValidNumericKeyboardEvent(event)) {
      event.preventDefault();
    }
    /**
     * Keyboard Accessibility
     *
     * We want to increase or decrease the input's value
     * based on if the user the arrow keys.
     *
     * @see https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard-interaction-17
     */


    var stepFactor = getStepFactor(event) * stepProp;
    var eventKey = normalizeEventKey(event);
    var keyMap = {
      ArrowUp: () => increment(stepFactor),
      ArrowDown: () => decrement(stepFactor),
      Home: () => updateFn(min),
      End: () => updateFn(max)
    };
    var action = keyMap[eventKey];

    if (action) {
      event.preventDefault();
      action(event);
    }
  }, [updateFn, decrement, increment, max, min, stepProp]);

  var getStepFactor = event => {
    var ratio = 1;

    if (event.metaKey || event.ctrlKey) {
      ratio = 0.1;
    }

    if (event.shiftKey) {
      ratio = 10;
    }

    return ratio;
  };
  /**
   * If user would like to use a human-readable representation
   * of the value, rather than the value itself they can pass `getAriaValueText`
   *
   * @see https://www.w3.org/TR/wai-aria-practices-1.1/#wai-aria-roles-states-and-properties-18
   * @see https://www.w3.org/TR/wai-aria-1.1/#aria-valuetext
   */


  var _getAriaValueText = () => {
    var text = getAriaValueText == null ? void 0 : getAriaValueText(counter.value);

    if (!isNull(text)) {
      return text;
    }

    var defaultText = counter.value.toString(); // empty string is an invalid ARIA attribute value

    return !defaultText ? undefined : defaultText;
  };

  var ariaValueText = _getAriaValueText();
  /**
   * Function that clamps the input's value on blur
   */


  var validateAndClamp = useCallback(() => {
    var next = counter.value;
    if (next === "") return;

    if (counter.valueAsNumber < min) {
      next = min;
    }

    if (counter.valueAsNumber > max) {
      next = max;
    }
    /**
     * `counter.cast` does 2 things:
     *
     * - sanitize the value by using parseFloat and some Regex
     * - used to round value to computed precision or decimal points
     */


    if (counter.value !== next) {
      counter.cast(next);
    }
  }, [counter, max, min]);
  var onBlur = useCallback(() => {
    setFocused.off();

    if (clampValueOnBlur) {
      validateAndClamp();
    }
  }, [clampValueOnBlur, setFocused, validateAndClamp]);
  var focusInput = useCallback(() => {
    if (focusInputOnChange && inputRef.current) {
      focus(inputRef.current);
    }
  }, [focusInputOnChange]);
  var spinUp = useCallback(event => {
    event.preventDefault();
    spinner.up();
    focusInput();
  }, [focusInput, spinner]);
  var spinDown = useCallback(event => {
    event.preventDefault();
    spinner.down();
    focusInput();
  }, [focusInput, spinner]);
  var pointerDown = isBrowser && !!document.documentElement.ontouchstart ? "onTouchStart" : "onMouseDown";
  useEventListener("wheel", function onWheel(event) {
    var isInputFocused = document.activeElement === inputRef.current;
    if (!allowMouseWheel || !isInputFocused) return;
    event.preventDefault();
    var stepFactor = getStepFactor(event) * stepProp;
    var direction = Math.sign(event.deltaY);

    if (direction === -1) {
      increment(stepFactor);
    } else if (direction === 1) {
      decrement(stepFactor);
    }
  }, inputRef.current);
  var getIncrementButtonProps = useCallback(function (props, ref) {
    if (props === void 0) {
      props = {};
    }

    if (ref === void 0) {
      ref = null;
    }

    return _extends({}, props, {
      ref,
      role: "button",
      tabIndex: -1,
      [pointerDown]: callAllHandlers(props[pointerDown], spinUp),
      onMouseUp: callAllHandlers(props.onMouseUp, spinner.stop),
      onMouseLeave: callAllHandlers(props.onMouseUp, spinner.stop),
      onTouchEnd: callAllHandlers(props.onTouchEnd, spinner.stop),
      disabled: keepWithinRange && counter.isAtMax,
      "aria-disabled": ariaAttr(keepWithinRange && counter.isAtMax)
    });
  }, [pointerDown, counter.isAtMax, keepWithinRange, spinUp, spinner.stop]);
  var getDecrementButtonProps = useCallback(function (props, ref) {
    if (props === void 0) {
      props = {};
    }

    if (ref === void 0) {
      ref = null;
    }

    return _extends({}, props, {
      ref,
      role: "button",
      tabIndex: -1,
      [pointerDown]: callAllHandlers(props[pointerDown], spinDown),
      onMouseLeave: callAllHandlers(props.onMouseLeave, spinner.stop),
      onMouseUp: callAllHandlers(props.onMouseUp, spinner.stop),
      onTouchEnd: callAllHandlers(props.onTouchEnd, spinner.stop),
      disabled: keepWithinRange && counter.isAtMin,
      "aria-disabled": ariaAttr(keepWithinRange && counter.isAtMin)
    });
  }, [pointerDown, counter.isAtMin, keepWithinRange, spinDown, spinner.stop]);
  var getInputProps = useCallback(function (props, ref) {
    if (props === void 0) {
      props = {};
    }

    if (ref === void 0) {
      ref = null;
    }

    return _extends({}, props, {
      id,
      ref: mergeRefs(inputRef, ref),
      value: counter.value,
      role: "spinbutton",
      type: "text",
      inputMode,
      pattern,
      "aria-valuemin": min,
      "aria-valuemax": max,
      "aria-disabled": isDisabled,
      "aria-valuenow": Number.isNaN(counter.valueAsNumber) ? undefined : counter.valueAsNumber,
      "aria-invalid": isInvalid || counter.isOutOfRange,
      "aria-valuetext": ariaValueText,
      readOnly: isReadOnly,
      disabled: isDisabled,
      autoComplete: "off",
      autoCorrect: "off",
      onChange: callAllHandlers(props.onChange, onChange),
      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),
      onFocus: callAllHandlers(props.onFocus, setFocused.on),
      onBlur: callAllHandlers(props.onBlur, onBlur)
    });
  }, [inputMode, pattern, ariaValueText, counter.isOutOfRange, counter.value, counter.valueAsNumber, id, isDisabled, isInvalid, isReadOnly, max, min, onBlur, onChange, onKeyDown, setFocused.on]);
  return {
    value: counter.value,
    valueAsNumber: counter.valueAsNumber,
    isFocused,
    isDisabled,
    isReadOnly,
    getIncrementButtonProps,
    getDecrementButtonProps,
    getInputProps,
    htmlProps
  };
}
//# sourceMappingURL=use-number-input.js.map