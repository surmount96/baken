{"version":3,"sources":["../../src/progress.utils.tsx"],"names":["keyframes","isFunction","valueToPercent","spin","strokeDasharray","strokeDashoffset","rotate","transform","progress","left","stripe","from","backgroundPosition","to","getProgressProps","options","value","min","max","valueText","getValueText","isIndeterminate","percent","getAriaValueText","undefined","bind","role"],"mappings":"AAAA,SAASA,SAAT,QAA0B,mBAA1B;AACA,SAASC,UAAT,EAAqBC,cAArB,QAA2C,kBAA3C;AAEA,OAAO,IAAMC,IAAI,GAAGH,SAAS,CAAC;AAC5B,QAAM;AACJI,IAAAA,eAAe,EAAE,QADb;AAEJC,IAAAA,gBAAgB,EAAE;AAFd,GADsB;AAK5B,SAAO;AACLD,IAAAA,eAAe,EAAE,UADZ;AAELC,IAAAA,gBAAgB,EAAE;AAFb,GALqB;AAS5B,UAAQ;AACND,IAAAA,eAAe,EAAE,UADX;AAENC,IAAAA,gBAAgB,EAAE;AAFZ;AAToB,CAAD,CAAtB;AAeP,OAAO,IAAMC,MAAM,GAAGN,SAAS,CAAC;AAC9B,QAAM;AACJO,IAAAA,SAAS,EAAE;AADP,GADwB;AAI9B,UAAQ;AACNA,IAAAA,SAAS,EAAE;AADL;AAJsB,CAAD,CAAxB;AASP,OAAO,IAAMC,QAAQ,GAAGR,SAAS,CAAC;AAChC,QAAM;AAAES,IAAAA,IAAI,EAAE;AAAR,GAD0B;AAEhC,UAAQ;AAAEA,IAAAA,IAAI,EAAE;AAAR;AAFwB,CAAD,CAA1B;AAKP,OAAO,IAAMC,MAAM,GAAGV,SAAS,CAAC;AAC9BW,EAAAA,IAAI,EAAE;AAAEC,IAAAA,kBAAkB,EAAE;AAAtB,GADwB;AAE9BC,EAAAA,EAAE,EAAE;AAAED,IAAAA,kBAAkB,EAAE;AAAtB;AAF0B,CAAD,CAAxB;;AAcP;AACA;AACA;AACA;AACA,OAAO,SAASE,gBAAT,CAA0BC,OAA1B,EAA4D;AACjE,MAAM;AACJC,IAAAA,KAAK,GAAG,CADJ;AAEJC,IAAAA,GAFI;AAGJC,IAAAA,GAHI;AAIJC,IAAAA,SAJI;AAKJC,IAAAA,YALI;AAMJC,IAAAA;AANI,MAOFN,OAPJ;AASA,MAAMO,OAAO,GAAGpB,cAAc,CAACc,KAAD,EAAQC,GAAR,EAAaC,GAAb,CAA9B;;AAEA,MAAMK,gBAAgB,GAAG,MAAM;AAC7B,QAAIP,KAAK,IAAI,IAAb,EAAmB,OAAOQ,SAAP;AACnB,WAAOvB,UAAU,CAACmB,YAAD,CAAV,GAA2BA,YAAY,CAACJ,KAAD,EAAQM,OAAR,CAAvC,GAA0DH,SAAjE;AACD,GAHD;;AAKA,SAAO;AACLM,IAAAA,IAAI,EAAE;AACJ,4BAAsBJ,eAAe,GAAG,EAAH,GAAQG,SADzC;AAEJ,uBAAiBN,GAFb;AAGJ,uBAAiBD,GAHb;AAIJ,uBAAiBI,eAAe,GAAGG,SAAH,GAAeR,KAJ3C;AAKJ,wBAAkBO,gBAAgB,EAL9B;AAMJG,MAAAA,IAAI,EAAE;AANF,KADD;AASLJ,IAAAA;AATK,GAAP;AAWD","sourcesContent":["import { keyframes } from \"@chakra-ui/system\"\nimport { isFunction, valueToPercent } from \"@chakra-ui/utils\"\n\nexport const spin = keyframes({\n  \"0%\": {\n    strokeDasharray: \"1, 400\",\n    strokeDashoffset: \"0\",\n  },\n  \"50%\": {\n    strokeDasharray: \"400, 400\",\n    strokeDashoffset: \"-100\",\n  },\n  \"100%\": {\n    strokeDasharray: \"400, 400\",\n    strokeDashoffset: \"-260\",\n  },\n})\n\nexport const rotate = keyframes({\n  \"0%\": {\n    transform: \"rotate(0deg)\",\n  },\n  \"100%\": {\n    transform: \"rotate(360deg)\",\n  },\n})\n\nexport const progress = keyframes({\n  \"0%\": { left: \"-40%\" },\n  \"100%\": { left: \"100%\" },\n})\n\nexport const stripe = keyframes({\n  from: { backgroundPosition: \"1rem 0\" },\n  to: { backgroundPosition: \"0 0\" },\n})\n\nexport interface GetProgressPropsOptions {\n  value?: number\n  min: number\n  max: number\n  valueText?: string\n  getValueText?(value: number, percent: number): string\n  isIndeterminate?: boolean\n}\n\n/**\n * Get the common `aria-*` attributes for both the linear and circular\n * progress components.\n */\nexport function getProgressProps(options: GetProgressPropsOptions) {\n  const {\n    value = 0,\n    min,\n    max,\n    valueText,\n    getValueText,\n    isIndeterminate,\n  } = options\n\n  const percent = valueToPercent(value, min, max)\n\n  const getAriaValueText = () => {\n    if (value == null) return undefined\n    return isFunction(getValueText) ? getValueText(value, percent) : valueText\n  }\n\n  return {\n    bind: {\n      \"data-indeterminate\": isIndeterminate ? \"\" : undefined,\n      \"aria-valuemax\": max,\n      \"aria-valuemin\": min,\n      \"aria-valuenow\": isIndeterminate ? undefined : value,\n      \"aria-valuetext\": getAriaValueText(),\n      role: \"progressbar\",\n    },\n    percent,\n  }\n}\n"],"file":"progress.utils.js"}