{"version":3,"sources":["../../src/use-form-label.tsx"],"names":["React","chakra","forwardRef","omitThemingProps","useStyleConfig","useStyles","cx","dataAttr","__DEV__","useFormControlContext","useFormControlLabel","props","field","isFocused","isDisabled","isInvalid","isLoading","isReadOnly","id","labelId","htmlFor","FormLabel","ref","styles","children","rest","ownProps","className","display","textAlign","isRequired","displayName","RequiredIndicator","_className","requiredIndicator"],"mappings":"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","sourcesContent":["import * as React from \"react\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  PropsOf,\n  ThemingProps,\n  useStyleConfig,\n  useStyles,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr, Dict, __DEV__ } from \"@chakra-ui/utils\"\nimport { useFormControlContext } from \"./form-control\"\n\nexport function useFormControlLabel(props: Dict) {\n  const field = useFormControlContext()\n  return {\n    ...props,\n    \"data-focus\": dataAttr(field?.isFocused),\n    \"data-disabled\": dataAttr(field?.isDisabled),\n    \"data-invalid\": dataAttr(field?.isInvalid),\n    \"data-loading\": dataAttr(field?.isLoading),\n    \"data-readonly\": dataAttr(field?.isReadOnly),\n    id: props.id ?? field?.labelId,\n    htmlFor: props.htmlFor ?? field?.id,\n  }\n}\n\nexport interface FormLabelProps\n  extends PropsOf<typeof chakra.label>,\n    ThemingProps {}\n\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\nexport const FormLabel = forwardRef<FormLabelProps, \"label\">(function FormLabel(\n  props,\n  ref,\n) {\n  const styles = useStyleConfig(\"FormLabel\", props)\n  const { className, children, ...rest } = omitThemingProps(props)\n\n  const ownProps = useFormControlLabel(rest)\n  const field = useFormControlContext()\n\n  return (\n    <chakra.label\n      ref={ref}\n      className={cx(\"chakra-form__label\", props.className)}\n      __css={{\n        display: \"block\",\n        textAlign: \"left\",\n        ...styles,\n      }}\n      {...ownProps}\n    >\n      {children}\n      {field?.isRequired && <RequiredIndicator />}\n    </chakra.label>\n  )\n})\n\nif (__DEV__) {\n  FormLabel.displayName = \"FormLabel\"\n}\n\nexport interface RequiredIndicatorProps extends PropsOf<typeof chakra.span> {}\n\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\nexport const RequiredIndicator = forwardRef<RequiredIndicatorProps, \"span\">(\n  function RequiredIndicator(props, ref) {\n    const { children, className, ...rest } = props\n    const field = useFormControlContext()\n    const styles = useStyles()\n\n    if (!field?.isRequired) return null\n\n    const _className = cx(\"chakra-form__required-indicator\", className)\n\n    return (\n      <chakra.span\n        role=\"presentation\"\n        aria-hidden\n        ref={ref}\n        {...rest}\n        __css={styles.requiredIndicator}\n        className={_className}\n      >\n        {children || \"*\"}\n      </chakra.span>\n    )\n  },\n)\n\nif (__DEV__) {\n  RequiredIndicator.displayName = \"RequiredIndicator\"\n}\n"],"file":"use-form-label.js"}