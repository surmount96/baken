{"version":3,"sources":["../../src/use-radio.ts"],"names":["useRadio","props","defaultIsChecked","isCheckedProp","isChecked","isFocusable","isDisabled","isReadOnly","isRequired","onChange","isInvalid","name","value","id","htmlProps","isFocused","setFocused","isHovered","setHovering","isActive","setActive","ref","Boolean","isCheckedState","setChecked","isControlled","handleChange","event","preventDefault","target","checked","trulyDisabled","onKeyDown","key","on","onKeyUp","off","getCheckboxProps","onMouseDown","onMouseUp","onMouseEnter","onMouseLeave","getInputProps","forwardedRef","type","onBlur","onFocus","disabled","readOnly","style","visuallyHiddenStyle","getLabelProps","stop","onTouchStart","state","stopPropagation"],"mappings":"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","sourcesContent":["import { useBoolean, useControllableProp } from \"@chakra-ui/hooks\"\nimport {\n  ariaAttr,\n  callAllHandlers,\n  dataAttr,\n  mergeRefs,\n  PropGetter,\n} from \"@chakra-ui/utils\"\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\"\nimport {\n  ChangeEvent,\n  SyntheticEvent,\n  useCallback,\n  useRef,\n  useState,\n} from \"react\"\n\n/**\n * @todo use the `useClickable` hook here\n * to manage the isFocusable & isDisabled props\n */\nexport interface UseRadioProps {\n  /**\n   * id assigned to input\n   */\n  id?: string\n  /**\n   * The name of the input field in a radio\n   * (Useful for form submission).\n   */\n  name?: string\n  /**\n   * The value to be used in the radio button.\n   * This is the value that will be returned on form submission.\n   */\n  value?: string | number\n  /**\n   * If `true`, the radio will be checked.\n   * You'll need to pass `onChange` to update it's value (since it's now controlled)\n   */\n  isChecked?: boolean\n  /**\n   * If `true`, the radio will be initially checked.\n   */\n  defaultIsChecked?: boolean\n  /**\n   * If `true`, the radio will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true` and `isDisabled` is true, the radio will remain\n   * focusable but not interactive.\n   */\n  isFocusable?: boolean\n  /**\n   * If `true`, the radio will be read-only\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the radio button will be invalid. This sets `aria-invalid` to `true`.\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the radio button will be invalid. This sets `aria-invalid` to `true`.\n   */\n  isRequired?: boolean\n  /**\n   * Function called when checked state of the `input` changes\n   */\n  onChange?: (event: ChangeEvent<HTMLInputElement>) => void\n}\n\nexport function useRadio(props: UseRadioProps = {}) {\n  const {\n    defaultIsChecked,\n    isChecked: isCheckedProp,\n    isFocusable,\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    onChange,\n    isInvalid,\n    name,\n    value,\n    id,\n    ...htmlProps\n  } = props\n\n  const [isFocused, setFocused] = useBoolean()\n  const [isHovered, setHovering] = useBoolean()\n  const [isActive, setActive] = useBoolean()\n\n  const ref = useRef<HTMLInputElement>(null)\n\n  const [isCheckedState, setChecked] = useState(Boolean(defaultIsChecked))\n\n  const [isControlled, isChecked] = useControllableProp(\n    isCheckedProp,\n    isCheckedState,\n  )\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (isReadOnly || isDisabled) {\n      event.preventDefault()\n      return\n    }\n\n    if (!isControlled) {\n      setChecked(event.target.checked)\n    }\n\n    onChange?.(event)\n  }\n\n  const trulyDisabled = isDisabled && !isFocusable\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive.on()\n      }\n    },\n    [setActive],\n  )\n\n  const onKeyUp = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive.off()\n      }\n    },\n    [setActive],\n  )\n\n  const getCheckboxProps: PropGetter = (props = {}, ref = null) => ({\n    ...props,\n    ref,\n    \"data-active\": dataAttr(isActive),\n    \"data-hover\": dataAttr(isHovered),\n    \"data-disabled\": dataAttr(isDisabled),\n    \"data-invalid\": dataAttr(isInvalid),\n    \"data-checked\": dataAttr(isChecked),\n    \"data-focus\": dataAttr(isFocused),\n    \"data-readonly\": dataAttr(isReadOnly),\n    \"aria-hidden\": true,\n    onMouseDown: callAllHandlers(props.onMouseDown, setActive.on),\n    onMouseUp: callAllHandlers(props.onMouseUp, setActive.off),\n    onMouseEnter: callAllHandlers(props.onMouseEnter, setHovering.on),\n    onMouseLeave: callAllHandlers(props.onMouseLeave, setHovering.off),\n  })\n\n  const getInputProps: PropGetter<HTMLInputElement> = (\n    props = {},\n    forwardedRef = null,\n  ) => ({\n    ...props,\n    ref: mergeRefs(forwardedRef, ref),\n    type: \"radio\",\n    name,\n    value,\n    id,\n    onChange: callAllHandlers(props.onChange, handleChange),\n    onBlur: callAllHandlers(props.onBlur, setFocused.off),\n    onFocus: callAllHandlers(props.onFocus, setFocused.on),\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n    onKeyUp: callAllHandlers(props.onKeyUp, onKeyUp),\n    \"aria-required\": ariaAttr(isRequired),\n    checked: isChecked,\n    disabled: trulyDisabled,\n    readOnly: isReadOnly,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"aria-disabled\": ariaAttr(isDisabled),\n    style: visuallyHiddenStyle,\n  })\n\n  const getLabelProps: PropGetter = (props = {}, ref = null) => {\n    return {\n      ...props,\n      ref,\n      onMouseDown: callAllHandlers(props.onMouseDown, stop),\n      onTouchStart: callAllHandlers(props.onTouchStart, stop),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid),\n    }\n  }\n\n  return {\n    state: {\n      isInvalid,\n      isFocused,\n      isChecked,\n      isActive,\n      isHovered,\n      isDisabled,\n      isReadOnly,\n      isRequired,\n    },\n    getCheckboxProps,\n    getInputProps,\n    getLabelProps,\n    htmlProps,\n  }\n}\n\n/**\n * Prevent `onBlur` being fired when the checkbox label is touched\n */\nfunction stop(event: SyntheticEvent) {\n  event.preventDefault()\n  event.stopPropagation()\n}\n\nexport type UseRadioReturn = ReturnType<typeof useRadio>\n"],"file":"use-radio.js"}