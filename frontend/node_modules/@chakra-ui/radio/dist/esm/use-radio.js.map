{"version":3,"sources":["../../src/use-radio.ts"],"names":["useBoolean","useControllableProp","ariaAttr","callAllHandlers","dataAttr","mergeRefs","visuallyHiddenStyle","useCallback","useRef","useState","useRadio","props","defaultIsChecked","isChecked","isCheckedProp","isFocusable","isDisabled","isReadOnly","isRequired","onChange","isInvalid","name","value","id","htmlProps","isFocused","setFocused","isHovered","setHovering","isActive","setActive","ref","isCheckedState","setChecked","Boolean","isControlled","handleChange","event","preventDefault","target","checked","trulyDisabled","onKeyDown","key","on","onKeyUp","off","getCheckboxProps","onMouseDown","onMouseUp","onMouseEnter","onMouseLeave","getInputProps","forwardedRef","type","onBlur","onFocus","disabled","readOnly","style","getLabelProps","stop","onTouchStart","state","stopPropagation"],"mappings":"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","sourcesContent":["import { useBoolean, useControllableProp } from \"@chakra-ui/hooks\"\nimport {\n  ariaAttr,\n  callAllHandlers,\n  dataAttr,\n  mergeRefs,\n  PropGetter,\n} from \"@chakra-ui/utils\"\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\"\nimport {\n  ChangeEvent,\n  SyntheticEvent,\n  useCallback,\n  useRef,\n  useState,\n} from \"react\"\n\n/**\n * @todo use the `useClickable` hook here\n * to manage the isFocusable & isDisabled props\n */\nexport interface UseRadioProps {\n  /**\n   * id assigned to input\n   */\n  id?: string\n  /**\n   * The name of the input field in a radio\n   * (Useful for form submission).\n   */\n  name?: string\n  /**\n   * The value to be used in the radio button.\n   * This is the value that will be returned on form submission.\n   */\n  value?: string | number\n  /**\n   * If `true`, the radio will be checked.\n   * You'll need to pass `onChange` to update it's value (since it's now controlled)\n   */\n  isChecked?: boolean\n  /**\n   * If `true`, the radio will be initially checked.\n   */\n  defaultIsChecked?: boolean\n  /**\n   * If `true`, the radio will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true` and `isDisabled` is true, the radio will remain\n   * focusable but not interactive.\n   */\n  isFocusable?: boolean\n  /**\n   * If `true`, the radio will be read-only\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the radio button will be invalid. This sets `aria-invalid` to `true`.\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the radio button will be invalid. This sets `aria-invalid` to `true`.\n   */\n  isRequired?: boolean\n  /**\n   * Function called when checked state of the `input` changes\n   */\n  onChange?: (event: ChangeEvent<HTMLInputElement>) => void\n}\n\nexport function useRadio(props: UseRadioProps = {}) {\n  const {\n    defaultIsChecked,\n    isChecked: isCheckedProp,\n    isFocusable,\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    onChange,\n    isInvalid,\n    name,\n    value,\n    id,\n    ...htmlProps\n  } = props\n\n  const [isFocused, setFocused] = useBoolean()\n  const [isHovered, setHovering] = useBoolean()\n  const [isActive, setActive] = useBoolean()\n\n  const ref = useRef<HTMLInputElement>(null)\n\n  const [isCheckedState, setChecked] = useState(Boolean(defaultIsChecked))\n\n  const [isControlled, isChecked] = useControllableProp(\n    isCheckedProp,\n    isCheckedState,\n  )\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (isReadOnly || isDisabled) {\n      event.preventDefault()\n      return\n    }\n\n    if (!isControlled) {\n      setChecked(event.target.checked)\n    }\n\n    onChange?.(event)\n  }\n\n  const trulyDisabled = isDisabled && !isFocusable\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive.on()\n      }\n    },\n    [setActive],\n  )\n\n  const onKeyUp = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive.off()\n      }\n    },\n    [setActive],\n  )\n\n  const getCheckboxProps: PropGetter = (props = {}, ref = null) => ({\n    ...props,\n    ref,\n    \"data-active\": dataAttr(isActive),\n    \"data-hover\": dataAttr(isHovered),\n    \"data-disabled\": dataAttr(isDisabled),\n    \"data-invalid\": dataAttr(isInvalid),\n    \"data-checked\": dataAttr(isChecked),\n    \"data-focus\": dataAttr(isFocused),\n    \"data-readonly\": dataAttr(isReadOnly),\n    \"aria-hidden\": true,\n    onMouseDown: callAllHandlers(props.onMouseDown, setActive.on),\n    onMouseUp: callAllHandlers(props.onMouseUp, setActive.off),\n    onMouseEnter: callAllHandlers(props.onMouseEnter, setHovering.on),\n    onMouseLeave: callAllHandlers(props.onMouseLeave, setHovering.off),\n  })\n\n  const getInputProps: PropGetter<HTMLInputElement> = (\n    props = {},\n    forwardedRef = null,\n  ) => ({\n    ...props,\n    ref: mergeRefs(forwardedRef, ref),\n    type: \"radio\",\n    name,\n    value,\n    id,\n    onChange: callAllHandlers(props.onChange, handleChange),\n    onBlur: callAllHandlers(props.onBlur, setFocused.off),\n    onFocus: callAllHandlers(props.onFocus, setFocused.on),\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n    onKeyUp: callAllHandlers(props.onKeyUp, onKeyUp),\n    \"aria-required\": ariaAttr(isRequired),\n    checked: isChecked,\n    disabled: trulyDisabled,\n    readOnly: isReadOnly,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"aria-disabled\": ariaAttr(isDisabled),\n    style: visuallyHiddenStyle,\n  })\n\n  const getLabelProps: PropGetter = (props = {}, ref = null) => {\n    return {\n      ...props,\n      ref,\n      onMouseDown: callAllHandlers(props.onMouseDown, stop),\n      onTouchStart: callAllHandlers(props.onTouchStart, stop),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid),\n    }\n  }\n\n  return {\n    state: {\n      isInvalid,\n      isFocused,\n      isChecked,\n      isActive,\n      isHovered,\n      isDisabled,\n      isReadOnly,\n      isRequired,\n    },\n    getCheckboxProps,\n    getInputProps,\n    getLabelProps,\n    htmlProps,\n  }\n}\n\n/**\n * Prevent `onBlur` being fired when the checkbox label is touched\n */\nfunction stop(event: SyntheticEvent) {\n  event.preventDefault()\n  event.stopPropagation()\n}\n\nexport type UseRadioReturn = ReturnType<typeof useRadio>\n"],"file":"use-radio.js"}