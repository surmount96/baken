function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { useBoolean, useControllableProp } from "@chakra-ui/hooks";
import { ariaAttr, callAllHandlers, dataAttr, mergeRefs } from "@chakra-ui/utils";
import { visuallyHiddenStyle } from "@chakra-ui/visually-hidden";
import { useCallback, useRef, useState } from "react";
/**
 * @todo use the `useClickable` hook here
 * to manage the isFocusable & isDisabled props
 */

export function useRadio(props) {
  if (props === void 0) {
    props = {};
  }

  var {
    defaultIsChecked,
    isChecked: isCheckedProp,
    isFocusable,
    isDisabled,
    isReadOnly,
    isRequired,
    onChange,
    isInvalid,
    name,
    value,
    id
  } = props,
      htmlProps = _objectWithoutPropertiesLoose(props, ["defaultIsChecked", "isChecked", "isFocusable", "isDisabled", "isReadOnly", "isRequired", "onChange", "isInvalid", "name", "value", "id"]);

  var [isFocused, setFocused] = useBoolean();
  var [isHovered, setHovering] = useBoolean();
  var [isActive, setActive] = useBoolean();
  var ref = useRef(null);
  var [isCheckedState, setChecked] = useState(Boolean(defaultIsChecked));
  var [isControlled, isChecked] = useControllableProp(isCheckedProp, isCheckedState);

  var handleChange = event => {
    if (isReadOnly || isDisabled) {
      event.preventDefault();
      return;
    }

    if (!isControlled) {
      setChecked(event.target.checked);
    }

    onChange == null ? void 0 : onChange(event);
  };

  var trulyDisabled = isDisabled && !isFocusable;
  var onKeyDown = useCallback(event => {
    if (event.key === " ") {
      setActive.on();
    }
  }, [setActive]);
  var onKeyUp = useCallback(event => {
    if (event.key === " ") {
      setActive.off();
    }
  }, [setActive]);

  var getCheckboxProps = function getCheckboxProps(props, ref) {
    if (props === void 0) {
      props = {};
    }

    if (ref === void 0) {
      ref = null;
    }

    return _extends({}, props, {
      ref,
      "data-active": dataAttr(isActive),
      "data-hover": dataAttr(isHovered),
      "data-disabled": dataAttr(isDisabled),
      "data-invalid": dataAttr(isInvalid),
      "data-checked": dataAttr(isChecked),
      "data-focus": dataAttr(isFocused),
      "data-readonly": dataAttr(isReadOnly),
      "aria-hidden": true,
      onMouseDown: callAllHandlers(props.onMouseDown, setActive.on),
      onMouseUp: callAllHandlers(props.onMouseUp, setActive.off),
      onMouseEnter: callAllHandlers(props.onMouseEnter, setHovering.on),
      onMouseLeave: callAllHandlers(props.onMouseLeave, setHovering.off)
    });
  };

  var getInputProps = function getInputProps(props, forwardedRef) {
    if (props === void 0) {
      props = {};
    }

    if (forwardedRef === void 0) {
      forwardedRef = null;
    }

    return _extends({}, props, {
      ref: mergeRefs(forwardedRef, ref),
      type: "radio",
      name,
      value,
      id,
      onChange: callAllHandlers(props.onChange, handleChange),
      onBlur: callAllHandlers(props.onBlur, setFocused.off),
      onFocus: callAllHandlers(props.onFocus, setFocused.on),
      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),
      onKeyUp: callAllHandlers(props.onKeyUp, onKeyUp),
      "aria-required": ariaAttr(isRequired),
      checked: isChecked,
      disabled: trulyDisabled,
      readOnly: isReadOnly,
      "aria-invalid": ariaAttr(isInvalid),
      "aria-disabled": ariaAttr(isDisabled),
      style: visuallyHiddenStyle
    });
  };

  var getLabelProps = function getLabelProps(props, ref) {
    if (props === void 0) {
      props = {};
    }

    if (ref === void 0) {
      ref = null;
    }

    return _extends({}, props, {
      ref,
      onMouseDown: callAllHandlers(props.onMouseDown, stop),
      onTouchStart: callAllHandlers(props.onTouchStart, stop),
      "data-disabled": dataAttr(isDisabled),
      "data-checked": dataAttr(isChecked),
      "data-invalid": dataAttr(isInvalid)
    });
  };

  return {
    state: {
      isInvalid,
      isFocused,
      isChecked,
      isActive,
      isHovered,
      isDisabled,
      isReadOnly,
      isRequired
    },
    getCheckboxProps,
    getInputProps,
    getLabelProps,
    htmlProps
  };
}
/**
 * Prevent `onBlur` being fired when the checkbox label is touched
 */

function stop(event) {
  event.preventDefault();
  event.stopPropagation();
}
//# sourceMappingURL=use-radio.js.map