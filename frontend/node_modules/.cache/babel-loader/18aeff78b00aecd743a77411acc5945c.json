{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { chakra, forwardRef, omitThemingProps, StylesProvider, useMultiStyleConfig, useStyles } from \"@chakra-ui/system\";\nimport { createContext, cx } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { CheckIcon, InfoIcon, WarningIcon } from \"./icons\";\nvar STATUSES = {\n  info: {\n    icon: InfoIcon,\n    colorScheme: \"blue\"\n  },\n  warning: {\n    icon: WarningIcon,\n    colorScheme: \"orange\"\n  },\n  success: {\n    icon: CheckIcon,\n    colorScheme: \"green\"\n  },\n  error: {\n    icon: WarningIcon,\n    colorScheme: \"red\"\n  }\n};\nvar [AlertProvider, useAlertContext] = createContext({\n  name: \"AlertContext\",\n  errorMessage: \"useAlertContext: `context` is undefined. Seems you forgot to wrap alert components in `<Alert />`\"\n});\n/**\n * Alert is used to communicate the state or status of a\n * page, feature or action\n */\n\nexport var Alert = /*#__PURE__*/forwardRef(function Alert(props, ref) {\n  var _omitThemingProps = omitThemingProps(props),\n      {\n    status = \"info\"\n  } = _omitThemingProps,\n      rest = _objectWithoutPropertiesLoose(_omitThemingProps, [\"status\"]);\n\n  var {\n    colorScheme\n  } = STATUSES[status];\n  var styles = useMultiStyleConfig(\"Alert\", _extends({}, props, {\n    colorScheme\n  }));\n\n  var alertStyles = _extends({\n    width: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    position: \"relative\",\n    overflow: \"hidden\"\n  }, styles.container);\n\n  return /*#__PURE__*/React.createElement(AlertProvider, {\n    value: {\n      status\n    }\n  }, /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, /*#__PURE__*/React.createElement(chakra.div, _extends({\n    role: \"alert\",\n    ref: ref\n  }, rest, {\n    className: cx(\"chakra-alert\", props.className),\n    __css: alertStyles\n  }))));\n});\nexport var AlertTitle = /*#__PURE__*/forwardRef(function AlertTitle(props, ref) {\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref\n  }, props, {\n    className: cx(\"chakra-alert__title\", props.className),\n    __css: styles.title\n  }));\n});\nexport var AlertDescription = /*#__PURE__*/forwardRef(function AlertDescription(props, ref) {\n  var styles = useStyles();\n\n  var descriptionStyles = _extends({\n    display: \"inline\"\n  }, styles.description);\n\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref\n  }, props, {\n    className: cx(\"chakra-alert__desc\", props.className),\n    __css: descriptionStyles\n  }));\n});\nexport var AlertIcon = props => {\n  var {\n    status\n  } = useAlertContext();\n  var {\n    icon: BaseIcon\n  } = STATUSES[status];\n  var styles = useStyles();\n  return /*#__PURE__*/React.createElement(chakra.span, _extends({\n    display: \"inherit\"\n  }, props, {\n    className: cx(\"chakra-alert__icon\", props.className),\n    __css: styles.icon\n  }), /*#__PURE__*/React.createElement(BaseIcon, {\n    w: \"100%\",\n    h: \"100%\"\n  }));\n};","map":{"version":3,"sources":["../../src/alert.tsx"],"names":["STATUSES","info","icon","colorScheme","warning","success","error","createContext","name","errorMessage","Alert","forwardRef","status","rest","omitThemingProps","styles","useMultiStyleConfig","alertStyles","width","display","alignItems","position","overflow","ref","cx","props","AlertTitle","useStyles","title","AlertDescription","descriptionStyles","AlertIcon","useAlertContext","BaseIcon"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  StylesProvider,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { createContext, cx } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { CheckIcon, InfoIcon, WarningIcon } from \"./icons\"\n\nconst STATUSES = {\n  info: { icon: InfoIcon, colorScheme: \"blue\" },\n  warning: { icon: WarningIcon, colorScheme: \"orange\" },\n  success: { icon: CheckIcon, colorScheme: \"green\" },\n  error: { icon: WarningIcon, colorScheme: \"red\" },\n}\n\nexport type AlertStatus = keyof typeof STATUSES\n\ninterface AlertContext {\n  status: AlertStatus\n}\n\nconst [AlertProvider, useAlertContext] = createContext<AlertContext>({\n  name: \"AlertContext\",\n  errorMessage:\n    \"useAlertContext: `context` is undefined. Seems you forgot to wrap alert components in `<Alert />`\",\n})\n\ninterface AlertOptions {\n  /**\n   * The status of the alert\n   */\n  status?: AlertStatus\n}\n\nexport interface AlertProps\n  extends HTMLChakraProps<\"div\">,\n    AlertOptions,\n    ThemingProps {}\n\n/**\n * Alert is used to communicate the state or status of a\n * page, feature or action\n */\nexport const Alert = forwardRef<AlertProps, \"div\">(function Alert(props, ref) {\n  const { status = \"info\", ...rest } = omitThemingProps(props)\n  const { colorScheme } = STATUSES[status]\n\n  const styles = useMultiStyleConfig(\"Alert\", { ...props, colorScheme })\n\n  const alertStyles: SystemStyleObject = {\n    width: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    position: \"relative\",\n    overflow: \"hidden\",\n    ...styles.container,\n  }\n\n  return (\n    <AlertProvider value={{ status }}>\n      <StylesProvider value={styles}>\n        <chakra.div\n          role=\"alert\"\n          ref={ref}\n          {...rest}\n          className={cx(\"chakra-alert\", props.className)}\n          __css={alertStyles}\n        />\n      </StylesProvider>\n    </AlertProvider>\n  )\n})\n\nexport interface AlertTitleProps extends HTMLChakraProps<\"div\"> {}\n\nexport const AlertTitle = forwardRef<AlertTitleProps, \"div\">(\n  function AlertTitle(props, ref) {\n    const styles = useStyles()\n\n    return (\n      <chakra.div\n        ref={ref}\n        {...props}\n        className={cx(\"chakra-alert__title\", props.className)}\n        __css={styles.title}\n      />\n    )\n  },\n)\n\nexport interface AlertDescriptionProps extends HTMLChakraProps<\"div\"> {}\n\nexport const AlertDescription = forwardRef<AlertDescriptionProps, \"div\">(\n  function AlertDescription(props, ref) {\n    const styles = useStyles()\n    const descriptionStyles: SystemStyleObject = {\n      display: \"inline\",\n      ...styles.description,\n    }\n\n    return (\n      <chakra.div\n        ref={ref}\n        {...props}\n        className={cx(\"chakra-alert__desc\", props.className)}\n        __css={descriptionStyles}\n      />\n    )\n  },\n)\n\nexport interface AlertIconProps extends HTMLChakraProps<\"span\"> {}\n\nexport const AlertIcon: React.FC<AlertIconProps> = (props) => {\n  const { status } = useAlertContext()\n  const { icon: BaseIcon } = STATUSES[status]\n  const styles = useStyles()\n\n  return (\n    <chakra.span\n      display=\"inherit\"\n      {...props}\n      className={cx(\"chakra-alert__icon\", props.className)}\n      __css={styles.icon}\n    >\n      <BaseIcon w=\"100%\" h=\"100%\" />\n    </chakra.span>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}