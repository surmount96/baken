{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useCounter } from \"@chakra-ui/counter\";\nimport { useBoolean, useEventListener } from \"@chakra-ui/hooks\";\nimport { ariaAttr, callAllHandlers, focus, isBrowser, isNull, maxSafeInteger, mergeRefs, minSafeInteger, normalizeEventKey } from \"@chakra-ui/utils\";\nimport { useCallback, useRef } from \"react\";\nimport { useSpinner } from \"./use-spinner\";\nimport { isFloatingPointNumericCharacter, isValidNumericKeyboardEvent } from \"./utils\";\n/**\n * React hook that implements the WAI-ARIA Spin Button widget\n * and used to create numeric input fields.\n *\n * It returns prop getters you can use to build your own\n * custom number inputs.\n *\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.1/#spinbutton\n * @see Docs     https://www.chakra-ui.com/useNumberInput\n * @see WHATWG   https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number)\n */\n\nexport function useNumberInput(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    focusInputOnChange = true,\n    clampValueOnBlur = true,\n    keepWithinRange = true,\n    min = minSafeInteger,\n    max = maxSafeInteger,\n    step: stepProp = 1,\n    isReadOnly,\n    isDisabled,\n    getAriaValueText,\n    isInvalid,\n    pattern = \"[0-9]*(.[0-9]+)?\",\n    inputMode = \"decimal\",\n    allowMouseWheel,\n    id\n  } = props,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"focusInputOnChange\", \"clampValueOnBlur\", \"keepWithinRange\", \"min\", \"max\", \"step\", \"isReadOnly\", \"isDisabled\", \"getAriaValueText\", \"isInvalid\", \"pattern\", \"inputMode\", \"allowMouseWheel\", \"id\", \"onChange\", \"precision\"]);\n  /**\n   * Leverage the `useCounter` hook since it provides\n   * the functionality to `increment`, `decrement` and `update`\n   * counter values\n   */\n\n\n  var counter = useCounter(props);\n  var {\n    update: updateFn,\n    increment: incrementFn,\n    decrement: decrementFn\n  } = counter;\n  /**\n   * Keep track of the focused state of the input,\n   * so user can this to change the styles of the\n   * `spinners`, maybe :)\n   */\n\n  var [isFocused, setFocused] = useBoolean();\n  var inputRef = useRef(null);\n  var isInteractive = !(isReadOnly || isDisabled);\n  var increment = useCallback(function (step) {\n    if (step === void 0) {\n      step = stepProp;\n    }\n\n    if (isInteractive) {\n      incrementFn(step);\n    }\n  }, [incrementFn, isInteractive, stepProp]);\n  var decrement = useCallback(function (step) {\n    if (step === void 0) {\n      step = stepProp;\n    }\n\n    if (isInteractive) {\n      decrementFn(step);\n    }\n  }, [decrementFn, isInteractive, stepProp]);\n  /**\n   * Leverage the `useSpinner` hook to spin the input's value\n   * when long press on the up and down buttons.\n   *\n   * This leverages `setInterval` internally\n   */\n\n  var spinner = useSpinner(increment, decrement);\n  /**\n   * The `onChange` handler filters out any character typed\n   * that isn't floating point compatible.\n   */\n\n  var onChange = useCallback(event => {\n    var valueString = event.target.value.split(\"\").filter(isFloatingPointNumericCharacter).join(\"\");\n    updateFn(valueString);\n  }, [updateFn]);\n  var onKeyDown = useCallback(event => {\n    /**\n     * only allow valid numeric keys\n     */\n    if (!isValidNumericKeyboardEvent(event)) {\n      event.preventDefault();\n    }\n    /**\n     * Keyboard Accessibility\n     *\n     * We want to increase or decrease the input's value\n     * based on if the user the arrow keys.\n     *\n     * @see https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard-interaction-17\n     */\n\n\n    var stepFactor = getStepFactor(event) * stepProp;\n    var eventKey = normalizeEventKey(event);\n    var keyMap = {\n      ArrowUp: () => increment(stepFactor),\n      ArrowDown: () => decrement(stepFactor),\n      Home: () => updateFn(min),\n      End: () => updateFn(max)\n    };\n    var action = keyMap[eventKey];\n\n    if (action) {\n      event.preventDefault();\n      action(event);\n    }\n  }, [updateFn, decrement, increment, max, min, stepProp]);\n\n  var getStepFactor = event => {\n    var ratio = 1;\n\n    if (event.metaKey || event.ctrlKey) {\n      ratio = 0.1;\n    }\n\n    if (event.shiftKey) {\n      ratio = 10;\n    }\n\n    return ratio;\n  };\n  /**\n   * If user would like to use a human-readable representation\n   * of the value, rather than the value itself they can pass `getAriaValueText`\n   *\n   * @see https://www.w3.org/TR/wai-aria-practices-1.1/#wai-aria-roles-states-and-properties-18\n   * @see https://www.w3.org/TR/wai-aria-1.1/#aria-valuetext\n   */\n\n\n  var _getAriaValueText = () => {\n    var text = getAriaValueText == null ? void 0 : getAriaValueText(counter.value);\n\n    if (!isNull(text)) {\n      return text;\n    }\n\n    var defaultText = counter.value.toString(); // empty string is an invalid ARIA attribute value\n\n    return !defaultText ? undefined : defaultText;\n  };\n\n  var ariaValueText = _getAriaValueText();\n  /**\n   * Function that clamps the input's value on blur\n   */\n\n\n  var validateAndClamp = useCallback(() => {\n    var next = counter.value;\n    if (next === \"\") return;\n\n    if (counter.valueAsNumber < min) {\n      next = min;\n    }\n\n    if (counter.valueAsNumber > max) {\n      next = max;\n    }\n    /**\n     * `counter.cast` does 2 things:\n     *\n     * - sanitize the value by using parseFloat and some Regex\n     * - used to round value to computed precision or decimal points\n     */\n\n\n    if (counter.value !== next) {\n      counter.cast(next);\n    }\n  }, [counter, max, min]);\n  var onBlur = useCallback(() => {\n    setFocused.off();\n\n    if (clampValueOnBlur) {\n      validateAndClamp();\n    }\n  }, [clampValueOnBlur, setFocused, validateAndClamp]);\n  var focusInput = useCallback(() => {\n    if (focusInputOnChange && inputRef.current) {\n      focus(inputRef.current);\n    }\n  }, [focusInputOnChange]);\n  var spinUp = useCallback(event => {\n    event.preventDefault();\n    spinner.up();\n    focusInput();\n  }, [focusInput, spinner]);\n  var spinDown = useCallback(event => {\n    event.preventDefault();\n    spinner.down();\n    focusInput();\n  }, [focusInput, spinner]);\n  var pointerDown = isBrowser && !!document.documentElement.ontouchstart ? \"onTouchStart\" : \"onMouseDown\";\n  useEventListener(\"wheel\", function onWheel(event) {\n    var isInputFocused = document.activeElement === inputRef.current;\n    if (!allowMouseWheel || !isInputFocused) return;\n    event.preventDefault();\n    var stepFactor = getStepFactor(event) * stepProp;\n    var direction = Math.sign(event.deltaY);\n\n    if (direction === -1) {\n      increment(stepFactor);\n    } else if (direction === 1) {\n      decrement(stepFactor);\n    }\n  }, inputRef.current);\n  var getIncrementButtonProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({}, props, {\n      ref,\n      role: \"button\",\n      tabIndex: -1,\n      [pointerDown]: callAllHandlers(props[pointerDown], spinUp),\n      onMouseUp: callAllHandlers(props.onMouseUp, spinner.stop),\n      onMouseLeave: callAllHandlers(props.onMouseUp, spinner.stop),\n      onTouchEnd: callAllHandlers(props.onTouchEnd, spinner.stop),\n      disabled: keepWithinRange && counter.isAtMax,\n      \"aria-disabled\": ariaAttr(keepWithinRange && counter.isAtMax)\n    });\n  }, [pointerDown, counter.isAtMax, keepWithinRange, spinUp, spinner.stop]);\n  var getDecrementButtonProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({}, props, {\n      ref,\n      role: \"button\",\n      tabIndex: -1,\n      [pointerDown]: callAllHandlers(props[pointerDown], spinDown),\n      onMouseLeave: callAllHandlers(props.onMouseLeave, spinner.stop),\n      onMouseUp: callAllHandlers(props.onMouseUp, spinner.stop),\n      onTouchEnd: callAllHandlers(props.onTouchEnd, spinner.stop),\n      disabled: keepWithinRange && counter.isAtMin,\n      \"aria-disabled\": ariaAttr(keepWithinRange && counter.isAtMin)\n    });\n  }, [pointerDown, counter.isAtMin, keepWithinRange, spinDown, spinner.stop]);\n  var getInputProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({}, props, {\n      id,\n      ref: mergeRefs(inputRef, ref),\n      value: counter.value,\n      role: \"spinbutton\",\n      type: \"text\",\n      inputMode,\n      pattern,\n      \"aria-valuemin\": min,\n      \"aria-valuemax\": max,\n      \"aria-disabled\": isDisabled,\n      \"aria-valuenow\": Number.isNaN(counter.valueAsNumber) ? undefined : counter.valueAsNumber,\n      \"aria-invalid\": isInvalid || counter.isOutOfRange,\n      \"aria-valuetext\": ariaValueText,\n      readOnly: isReadOnly,\n      disabled: isDisabled,\n      autoComplete: \"off\",\n      autoCorrect: \"off\",\n      onChange: callAllHandlers(props.onChange, onChange),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(props.onFocus, setFocused.on),\n      onBlur: callAllHandlers(props.onBlur, onBlur)\n    });\n  }, [inputMode, pattern, ariaValueText, counter.isOutOfRange, counter.value, counter.valueAsNumber, id, isDisabled, isInvalid, isReadOnly, max, min, onBlur, onChange, onKeyDown, setFocused.on]);\n  return {\n    value: counter.value,\n    valueAsNumber: counter.valueAsNumber,\n    isFocused,\n    isDisabled,\n    isReadOnly,\n    getIncrementButtonProps,\n    getDecrementButtonProps,\n    getInputProps,\n    htmlProps\n  };\n}","map":{"version":3,"sources":["../../src/use-number-input.ts"],"names":["props","focusInputOnChange","clampValueOnBlur","keepWithinRange","min","max","step","stepProp","pattern","inputMode","id","htmlProps","counter","useCounter","update","increment","decrement","decrementFn","useBoolean","inputRef","useRef","isInteractive","isReadOnly","useCallback","incrementFn","spinner","useSpinner","onChange","event","valueString","updateFn","onKeyDown","isValidNumericKeyboardEvent","stepFactor","getStepFactor","eventKey","normalizeEventKey","keyMap","ArrowUp","ArrowDown","Home","End","action","ratio","_getAriaValueText","text","getAriaValueText","isNull","defaultText","ariaValueText","validateAndClamp","next","onBlur","setFocused","focusInput","focus","spinUp","spinDown","pointerDown","isBrowser","document","useEventListener","isInputFocused","direction","Math","getIncrementButtonProps","ref","role","tabIndex","callAllHandlers","onMouseUp","onMouseLeave","onTouchEnd","disabled","ariaAttr","getDecrementButtonProps","getInputProps","mergeRefs","value","type","Number","isInvalid","readOnly","autoComplete","autoCorrect","onFocus","valueAsNumber"],"mappings":"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","sourcesContent":["import { useCounter, UseCounterProps } from \"@chakra-ui/counter\"\nimport { useBoolean, useEventListener } from \"@chakra-ui/hooks\"\nimport {\n  ariaAttr,\n  callAllHandlers,\n  EventKeyMap,\n  focus,\n  isBrowser,\n  isNull,\n  maxSafeInteger,\n  mergeRefs,\n  minSafeInteger,\n  normalizeEventKey,\n  PropGetter,\n  StringOrNumber,\n} from \"@chakra-ui/utils\"\nimport { ChangeEvent, KeyboardEvent, useCallback, useRef } from \"react\"\nimport { useSpinner } from \"./use-spinner\"\nimport {\n  isFloatingPointNumericCharacter,\n  isValidNumericKeyboardEvent,\n} from \"./utils\"\n\nexport interface UseNumberInputProps extends UseCounterProps {\n  /**\n   * If `true`, the input will be focused as you increment\n   * or decrement the value with the stepper\n   *\n   * @default true\n   */\n  focusInputOnChange?: boolean\n  /**\n   * This controls the value update when you blur out of the input.\n   * - If `true` and the value is greater than `max`, the value will be reset to `max`\n   * - Else, the value remains the same.\n   *\n   * @default true\n   */\n  clampValueOnBlur?: boolean\n  /**\n   * This is used to format the value so that screen readers\n   * can speak out a more human-friendly value.\n   *\n   * It is used to set the `aria-valuetext` property of the input\n   */\n  getAriaValueText?(value: StringOrNumber): string\n  /**\n   * If `true`, the input will be in readonly mode\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the input will have `aria-invalid` set to `true`\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the input will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * The `id` to use for the number input field.\n   */\n  id?: string\n  /**\n   * The pattern used to check the <input> element's value against on form submission.\n   *\n   * @default\n   * \"[0-9]*(.[0-9]+)?\"\n   */\n  pattern?: React.InputHTMLAttributes<any>[\"pattern\"]\n  /**\n   * Hints at the type of data that might be entered by the user. It also determines\n   * the type of keyboard shown to the user on mobile devices\n   *\n   * @default\n   * \"decimal\"\n   */\n  inputMode?: React.InputHTMLAttributes<any>[\"inputMode\"]\n  /**\n   * If `true`, the input's value will change based on mouse wheel\n   */\n  allowMouseWheel?: boolean\n}\n\n/**\n * React hook that implements the WAI-ARIA Spin Button widget\n * and used to create numeric input fields.\n *\n * It returns prop getters you can use to build your own\n * custom number inputs.\n *\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.1/#spinbutton\n * @see Docs     https://www.chakra-ui.com/useNumberInput\n * @see WHATWG   https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number)\n */\nexport function useNumberInput(props: UseNumberInputProps = {}) {\n  const {\n    focusInputOnChange = true,\n    clampValueOnBlur = true,\n    keepWithinRange = true,\n    min = minSafeInteger,\n    max = maxSafeInteger,\n    step: stepProp = 1,\n    isReadOnly,\n    isDisabled,\n    getAriaValueText,\n    isInvalid,\n    pattern = \"[0-9]*(.[0-9]+)?\",\n    inputMode = \"decimal\",\n    allowMouseWheel,\n    id,\n    /**\n     * These props are destructured to ensure `htmlProps` resolves to the correct type\n     */\n    onChange: onChangeProp,\n    precision,\n    ...htmlProps\n  } = props\n\n  /**\n   * Leverage the `useCounter` hook since it provides\n   * the functionality to `increment`, `decrement` and `update`\n   * counter values\n   */\n  const counter = useCounter(props)\n  const {\n    update: updateFn,\n    increment: incrementFn,\n    decrement: decrementFn,\n  } = counter\n\n  /**\n   * Keep track of the focused state of the input,\n   * so user can this to change the styles of the\n   * `spinners`, maybe :)\n   */\n  const [isFocused, setFocused] = useBoolean()\n\n  const inputRef = useRef<HTMLInputElement>(null)\n\n  const isInteractive = !(isReadOnly || isDisabled)\n\n  const increment = useCallback(\n    (step = stepProp) => {\n      if (isInteractive) {\n        incrementFn(step)\n      }\n    },\n    [incrementFn, isInteractive, stepProp],\n  )\n\n  const decrement = useCallback(\n    (step = stepProp) => {\n      if (isInteractive) {\n        decrementFn(step)\n      }\n    },\n    [decrementFn, isInteractive, stepProp],\n  )\n\n  /**\n   * Leverage the `useSpinner` hook to spin the input's value\n   * when long press on the up and down buttons.\n   *\n   * This leverages `setInterval` internally\n   */\n  const spinner = useSpinner(increment, decrement)\n\n  /**\n   * The `onChange` handler filters out any character typed\n   * that isn't floating point compatible.\n   */\n  const onChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      const valueString = event.target.value\n        .split(\"\")\n        .filter(isFloatingPointNumericCharacter)\n        .join(\"\")\n      updateFn(valueString)\n    },\n    [updateFn],\n  )\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      /**\n       * only allow valid numeric keys\n       */\n      if (!isValidNumericKeyboardEvent(event)) {\n        event.preventDefault()\n      }\n\n      /**\n       * Keyboard Accessibility\n       *\n       * We want to increase or decrease the input's value\n       * based on if the user the arrow keys.\n       *\n       * @see https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard-interaction-17\n       */\n      const stepFactor = getStepFactor(event) * stepProp\n\n      const eventKey = normalizeEventKey(event)\n\n      const keyMap: EventKeyMap = {\n        ArrowUp: () => increment(stepFactor),\n        ArrowDown: () => decrement(stepFactor),\n        Home: () => updateFn(min),\n        End: () => updateFn(max),\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        action(event)\n      }\n    },\n    [updateFn, decrement, increment, max, min, stepProp],\n  )\n\n  const getStepFactor = <E extends React.KeyboardEvent | React.WheelEvent>(\n    event: E,\n  ) => {\n    let ratio = 1\n    if (event.metaKey || event.ctrlKey) {\n      ratio = 0.1\n    }\n    if (event.shiftKey) {\n      ratio = 10\n    }\n    return ratio\n  }\n\n  /**\n   * If user would like to use a human-readable representation\n   * of the value, rather than the value itself they can pass `getAriaValueText`\n   *\n   * @see https://www.w3.org/TR/wai-aria-practices-1.1/#wai-aria-roles-states-and-properties-18\n   * @see https://www.w3.org/TR/wai-aria-1.1/#aria-valuetext\n   */\n  const _getAriaValueText = () => {\n    const text = getAriaValueText?.(counter.value)\n    if (!isNull(text)) {\n      return text\n    }\n\n    const defaultText = counter.value.toString()\n    // empty string is an invalid ARIA attribute value\n    return !defaultText ? undefined : defaultText\n  }\n\n  const ariaValueText = _getAriaValueText()\n\n  /**\n   * Function that clamps the input's value on blur\n   */\n  const validateAndClamp = useCallback(() => {\n    let next = counter.value as StringOrNumber\n\n    if (next === \"\") return\n\n    if (counter.valueAsNumber < min) {\n      next = min\n    }\n\n    if (counter.valueAsNumber > max) {\n      next = max\n    }\n\n    /**\n     * `counter.cast` does 2 things:\n     *\n     * - sanitize the value by using parseFloat and some Regex\n     * - used to round value to computed precision or decimal points\n     */\n    if (counter.value !== next) {\n      counter.cast(next)\n    }\n  }, [counter, max, min])\n\n  const onBlur = useCallback(() => {\n    setFocused.off()\n\n    if (clampValueOnBlur) {\n      validateAndClamp()\n    }\n  }, [clampValueOnBlur, setFocused, validateAndClamp])\n\n  const focusInput = useCallback(() => {\n    if (focusInputOnChange && inputRef.current) {\n      focus(inputRef.current)\n    }\n  }, [focusInputOnChange])\n\n  const spinUp = useCallback(\n    (event: any) => {\n      event.preventDefault()\n      spinner.up()\n      focusInput()\n    },\n    [focusInput, spinner],\n  )\n\n  const spinDown = useCallback(\n    (event: any) => {\n      event.preventDefault()\n      spinner.down()\n      focusInput()\n    },\n    [focusInput, spinner],\n  )\n\n  const pointerDown =\n    isBrowser && !!document.documentElement.ontouchstart\n      ? \"onTouchStart\"\n      : \"onMouseDown\"\n\n  useEventListener(\n    \"wheel\",\n    function onWheel(event) {\n      const isInputFocused = document.activeElement === inputRef.current\n      if (!allowMouseWheel || !isInputFocused) return\n\n      event.preventDefault()\n\n      const stepFactor = getStepFactor(event as any) * stepProp\n      const direction = Math.sign(event.deltaY)\n\n      if (direction === -1) {\n        increment(stepFactor)\n      } else if (direction === 1) {\n        decrement(stepFactor)\n      }\n    },\n    inputRef.current,\n  )\n\n  const getIncrementButtonProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref,\n      role: \"button\",\n      tabIndex: -1,\n      [pointerDown]: callAllHandlers(props[pointerDown], spinUp),\n      onMouseUp: callAllHandlers(props.onMouseUp, spinner.stop),\n      onMouseLeave: callAllHandlers(props.onMouseUp, spinner.stop),\n      onTouchEnd: callAllHandlers(props.onTouchEnd, spinner.stop),\n      disabled: keepWithinRange && counter.isAtMax,\n      \"aria-disabled\": ariaAttr(keepWithinRange && counter.isAtMax),\n    }),\n    [pointerDown, counter.isAtMax, keepWithinRange, spinUp, spinner.stop],\n  )\n\n  const getDecrementButtonProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref,\n      role: \"button\",\n      tabIndex: -1,\n      [pointerDown]: callAllHandlers(props[pointerDown], spinDown),\n      onMouseLeave: callAllHandlers(props.onMouseLeave, spinner.stop),\n      onMouseUp: callAllHandlers(props.onMouseUp, spinner.stop),\n      onTouchEnd: callAllHandlers(props.onTouchEnd, spinner.stop),\n      disabled: keepWithinRange && counter.isAtMin,\n      \"aria-disabled\": ariaAttr(keepWithinRange && counter.isAtMin),\n    }),\n    [pointerDown, counter.isAtMin, keepWithinRange, spinDown, spinner.stop],\n  )\n\n  const getInputProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      id,\n      ref: mergeRefs(inputRef, ref),\n      value: counter.value,\n      role: \"spinbutton\",\n      type: \"text\",\n      inputMode,\n      pattern,\n      \"aria-valuemin\": min,\n      \"aria-valuemax\": max,\n      \"aria-disabled\": isDisabled,\n      \"aria-valuenow\": Number.isNaN(counter.valueAsNumber)\n        ? undefined\n        : counter.valueAsNumber,\n      \"aria-invalid\": isInvalid || counter.isOutOfRange,\n      \"aria-valuetext\": ariaValueText,\n      readOnly: isReadOnly,\n      disabled: isDisabled,\n      autoComplete: \"off\",\n      autoCorrect: \"off\",\n      onChange: callAllHandlers(props.onChange, onChange),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(props.onFocus, setFocused.on),\n      onBlur: callAllHandlers(props.onBlur, onBlur),\n    }),\n    [\n      inputMode,\n      pattern,\n      ariaValueText,\n      counter.isOutOfRange,\n      counter.value,\n      counter.valueAsNumber,\n      id,\n      isDisabled,\n      isInvalid,\n      isReadOnly,\n      max,\n      min,\n      onBlur,\n      onChange,\n      onKeyDown,\n      setFocused.on,\n    ],\n  )\n\n  return {\n    value: counter.value,\n    valueAsNumber: counter.valueAsNumber,\n    isFocused,\n    isDisabled,\n    isReadOnly,\n    getIncrementButtonProps,\n    getDecrementButtonProps,\n    getInputProps,\n    htmlProps,\n  }\n}\n\nexport type UseNumberInputReturn = ReturnType<typeof useNumberInput>\n"]},"metadata":{},"sourceType":"module"}