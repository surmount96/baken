{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from \"react\";\nimport { chakra, forwardRef, omitThemingProps, useStyleConfig, useStyles } from \"@chakra-ui/system\";\nimport { cx, dataAttr, __DEV__ } from \"@chakra-ui/utils\";\nimport { useFormControlContext } from \"./form-control\";\nexport function useFormControlLabel(props) {\n  var _props$id, _props$htmlFor;\n\n  var field = useFormControlContext();\n  return _extends({}, props, {\n    \"data-focus\": dataAttr(field == null ? void 0 : field.isFocused),\n    \"data-disabled\": dataAttr(field == null ? void 0 : field.isDisabled),\n    \"data-invalid\": dataAttr(field == null ? void 0 : field.isInvalid),\n    \"data-loading\": dataAttr(field == null ? void 0 : field.isLoading),\n    \"data-readonly\": dataAttr(field == null ? void 0 : field.isReadOnly),\n    id: (_props$id = props.id) != null ? _props$id : field == null ? void 0 : field.labelId,\n    htmlFor: (_props$htmlFor = props.htmlFor) != null ? _props$htmlFor : field == null ? void 0 : field.id\n  });\n}\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\n\nexport var FormLabel = /*#__PURE__*/forwardRef(function FormLabel(props, ref) {\n  var styles = useStyleConfig(\"FormLabel\", props);\n\n  var _omitThemingProps = omitThemingProps(props),\n      {\n    children\n  } = _omitThemingProps,\n      rest = _objectWithoutPropertiesLoose(_omitThemingProps, [\"className\", \"children\"]);\n\n  var ownProps = useFormControlLabel(rest);\n  var field = useFormControlContext();\n  return /*#__PURE__*/React.createElement(chakra.label, _extends({\n    ref: ref,\n    className: cx(\"chakra-form__label\", props.className),\n    __css: _extends({\n      display: \"block\",\n      textAlign: \"left\"\n    }, styles)\n  }, ownProps), children, (field == null ? void 0 : field.isRequired) && /*#__PURE__*/React.createElement(RequiredIndicator, null));\n});\n\nif (__DEV__) {\n  FormLabel.displayName = \"FormLabel\";\n}\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\n\n\nexport var RequiredIndicator = /*#__PURE__*/forwardRef(function RequiredIndicator(props, ref) {\n  var {\n    children,\n    className\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"children\", \"className\"]);\n\n  var field = useFormControlContext();\n  var styles = useStyles();\n  if (!(field == null ? void 0 : field.isRequired)) return null;\n\n  var _className = cx(\"chakra-form__required-indicator\", className);\n\n  return /*#__PURE__*/React.createElement(chakra.span, _extends({\n    role: \"presentation\",\n    \"aria-hidden\": true,\n    ref: ref\n  }, rest, {\n    __css: styles.requiredIndicator,\n    className: _className\n  }), children || \"*\");\n});\n\nif (__DEV__) {\n  RequiredIndicator.displayName = \"RequiredIndicator\";\n}","map":{"version":3,"sources":["../../src/use-form-label.tsx"],"names":["field","useFormControlContext","dataAttr","id","props","htmlFor","FormLabel","forwardRef","styles","useStyleConfig","children","rest","omitThemingProps","ownProps","useFormControlLabel","cx","display","textAlign","RequiredIndicator","className","useStyles","_className","ref"],"mappings":"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","sourcesContent":["import * as React from \"react\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  PropsOf,\n  ThemingProps,\n  useStyleConfig,\n  useStyles,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr, Dict, __DEV__ } from \"@chakra-ui/utils\"\nimport { useFormControlContext } from \"./form-control\"\n\nexport function useFormControlLabel(props: Dict) {\n  const field = useFormControlContext()\n  return {\n    ...props,\n    \"data-focus\": dataAttr(field?.isFocused),\n    \"data-disabled\": dataAttr(field?.isDisabled),\n    \"data-invalid\": dataAttr(field?.isInvalid),\n    \"data-loading\": dataAttr(field?.isLoading),\n    \"data-readonly\": dataAttr(field?.isReadOnly),\n    id: props.id ?? field?.labelId,\n    htmlFor: props.htmlFor ?? field?.id,\n  }\n}\n\nexport interface FormLabelProps\n  extends PropsOf<typeof chakra.label>,\n    ThemingProps {}\n\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\nexport const FormLabel = forwardRef<FormLabelProps, \"label\">(function FormLabel(\n  props,\n  ref,\n) {\n  const styles = useStyleConfig(\"FormLabel\", props)\n  const { className, children, ...rest } = omitThemingProps(props)\n\n  const ownProps = useFormControlLabel(rest)\n  const field = useFormControlContext()\n\n  return (\n    <chakra.label\n      ref={ref}\n      className={cx(\"chakra-form__label\", props.className)}\n      __css={{\n        display: \"block\",\n        textAlign: \"left\",\n        ...styles,\n      }}\n      {...ownProps}\n    >\n      {children}\n      {field?.isRequired && <RequiredIndicator />}\n    </chakra.label>\n  )\n})\n\nif (__DEV__) {\n  FormLabel.displayName = \"FormLabel\"\n}\n\nexport interface RequiredIndicatorProps extends PropsOf<typeof chakra.span> {}\n\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\nexport const RequiredIndicator = forwardRef<RequiredIndicatorProps, \"span\">(\n  function RequiredIndicator(props, ref) {\n    const { children, className, ...rest } = props\n    const field = useFormControlContext()\n    const styles = useStyles()\n\n    if (!field?.isRequired) return null\n\n    const _className = cx(\"chakra-form__required-indicator\", className)\n\n    return (\n      <chakra.span\n        role=\"presentation\"\n        aria-hidden\n        ref={ref}\n        {...rest}\n        __css={styles.requiredIndicator}\n        className={_className}\n      >\n        {children || \"*\"}\n      </chakra.span>\n    )\n  },\n)\n\nif (__DEV__) {\n  RequiredIndicator.displayName = \"RequiredIndicator\"\n}\n"]},"metadata":{},"sourceType":"module"}