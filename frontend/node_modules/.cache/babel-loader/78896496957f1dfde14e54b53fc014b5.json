{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useDescendants, useDescendant } from \"@chakra-ui/descendant\";\nimport { useControllableState, useId } from \"@chakra-ui/hooks\";\nimport { mergeRefs, callAllHandlers, createContext, ariaAttr } from \"@chakra-ui/utils\";\nimport { useState, useEffect, useRef, useCallback } from \"react\";\nvar [PinInputProvider, usePinInputContext] = createContext({\n  name: \"PinInputContext\",\n  errorMessage: \"usePinInputContext: `context` is undefined. Seems you forgot to all pin input fields within `<PinInput />`\"\n});\nexport { PinInputProvider, usePinInputContext };\n\nfunction toArray(value) {\n  if (typeof value === \"string\") {\n    return value.split(\"\");\n  }\n\n  return undefined;\n}\n\nexport function usePinInput(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    autoFocus,\n    value,\n    defaultValue,\n    onChange: _onChange,\n    onComplete,\n    placeholder = \"â—‹\",\n    manageFocus = true,\n    id: idProp,\n    isDisabled,\n    isInvalid\n  } = props;\n  var uuid = useId();\n  var id = idProp != null ? idProp : \"pin-input-\" + uuid;\n  var domContext = useDescendants();\n  var {\n    descendants\n  } = domContext;\n  var [moveFocus, setMoveFocus] = useState(true);\n  var [values, setValues] = useControllableState({\n    defaultValue: toArray(defaultValue) || [],\n    value: toArray(value),\n    onChange: values => _onChange == null ? void 0 : _onChange(values.join(\"\"))\n  });\n  useEffect(() => {\n    if (autoFocus) {\n      var _firstInput$element;\n\n      var firstInput = descendants[0];\n      firstInput == null ? void 0 : (_firstInput$element = firstInput.element) == null ? void 0 : _firstInput$element.focus();\n    }\n  }, [descendants, autoFocus]);\n  var focusNext = useCallback(index => {\n    var _nextInput$element;\n\n    if (!moveFocus || !manageFocus) return;\n    var nextInput = descendants[index + 1];\n    nextInput == null ? void 0 : (_nextInput$element = nextInput.element) == null ? void 0 : _nextInput$element.focus();\n  }, [descendants, moveFocus, manageFocus]);\n  var setValue = useCallback((value, index) => {\n    var nextValues = [...values];\n    nextValues[index] = value;\n    setValues(nextValues); // if we're at the last input, call onComplete (no need to move focus)\n\n    if (index === descendants.length - 1) {\n      onComplete == null ? void 0 : onComplete(nextValues.join(\"\"));\n    } else {\n      focusNext(index);\n    }\n  }, [values, setValues, focusNext, onComplete, descendants.length]);\n  var clear = useCallback(() => {\n    var _firstInput$element2;\n\n    var values = Array(descendants.length).fill(\"\");\n    setValues(values);\n    var firstInput = descendants[0];\n    (_firstInput$element2 = firstInput.element) == null ? void 0 : _firstInput$element2.focus();\n  }, [descendants, setValues]);\n  return {\n    id,\n    domContext,\n    setValue,\n    values,\n    setValues,\n    setMoveFocus,\n    clear,\n    onComplete,\n    placeholder,\n    manageFocus,\n    isDisabled,\n    isInvalid\n  };\n}\nexport function usePinInputField(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    ref: forwardedRef\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"ref\"]);\n\n  var ref = useRef(null);\n  var {\n    id,\n    isDisabled,\n    isInvalid,\n    setValue,\n    values,\n    setMoveFocus,\n    setValues,\n    domContext,\n    placeholder,\n    manageFocus\n  } = usePinInputContext();\n  var {\n    descendants\n  } = domContext;\n  var index = useDescendant({\n    context: domContext,\n    element: ref.current\n  });\n  var getNextValue = useCallback((currentValue, eventValue) => {\n    var nextValue = eventValue;\n\n    if (currentValue && currentValue.length > 0) {\n      var [firstValue, secondValue] = eventValue;\n\n      if (currentValue[0] === firstValue) {\n        nextValue = secondValue;\n      } else if (currentValue[0] === secondValue) {\n        nextValue = firstValue;\n      }\n    }\n\n    return nextValue;\n  }, []); // Improved from: https://github.com/uber/baseweb/blob/master/src/pin-code/pin-code.js\n\n  var onChange = useCallback(event => {\n    var eventValue = event.target.value;\n    var currentValue = values[index];\n    var nextValue = getNextValue(currentValue, eventValue); // if the value was removed using backspace\n\n    if (nextValue === \"\") {\n      setValue(\"\", index);\n      return;\n    } // in the case of an autocomplete or copy and paste\n\n\n    if (eventValue.length > 2) {\n      // see if we can use the string to fill out our values\n      if (eventValue.match(/^[0-9]+$/)) {\n        var {\n          length\n        } = descendants; // ensure the value matches the number of inputs\n\n        var _nextValue = eventValue.split(\"\").filter((_, i) => i < length);\n\n        setValues(_nextValue);\n      }\n\n      return;\n    } // only set if the new value is a number\n\n\n    if (nextValue.match(/^[0-9]$/)) {\n      setValue(nextValue, index);\n    }\n\n    setMoveFocus(true);\n  }, [values, index, getNextValue, setMoveFocus, setValue, descendants.length, setValues]);\n  var onKeyDown = useCallback(event => {\n    if (event.key === \"Backspace\" && manageFocus) {\n      if (event.target.value === \"\") {\n        var prevInput = descendants[index - 1];\n\n        if (prevInput) {\n          var _prevInput$element;\n\n          setValue(\"\", index - 1);\n          (_prevInput$element = prevInput.element) == null ? void 0 : _prevInput$element.focus();\n          setMoveFocus(true);\n        }\n      } else {\n        setMoveFocus(false);\n      }\n    }\n  }, [descendants, index, setValue, setMoveFocus, manageFocus]);\n  var [hasFocus, setHasFocus] = useState(false);\n  var onFocus = useCallback(() => {\n    setHasFocus(true);\n  }, []);\n  var onBlur = useCallback(() => {\n    setHasFocus(false);\n  }, []);\n  return _extends({}, rest, {\n    id: id + \"-\" + index,\n    disabled: isDisabled,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    ref: mergeRefs(ref, forwardedRef),\n    onChange: callAllHandlers(rest.onChange, onChange),\n    onKeyDown: callAllHandlers(rest.onKeyDown, onKeyDown),\n    onFocus: callAllHandlers(rest.onFocus, onFocus),\n    onBlur: callAllHandlers(rest.onBlur, onBlur),\n    value: values[index] || \"\",\n    inputMode: \"numeric\",\n    \"aria-label\": rest[\"aria-label\"] || \"Please enter your pin code\",\n    autoComplete: \"not-allowed\",\n    placeholder: hasFocus ? \"\" : placeholder\n  });\n}","map":{"version":3,"sources":["../../src/use-pin-input.ts"],"names":["createContext","name","errorMessage","value","props","onChange","placeholder","manageFocus","id","isInvalid","uuid","useId","idProp","domContext","useDescendants","descendants","useState","useControllableState","defaultValue","toArray","values","useEffect","firstInput","focusNext","useCallback","index","nextInput","setValue","nextValues","setValues","onComplete","clear","Array","ref","forwardedRef","rest","useRef","usePinInputContext","useDescendant","context","element","current","getNextValue","nextValue","currentValue","event","eventValue","length","i","setMoveFocus","onKeyDown","prevInput","onFocus","setHasFocus","onBlur","disabled","ariaAttr","mergeRefs","callAllHandlers","inputMode","autoComplete","hasFocus"],"mappings":"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","sourcesContent":["import { useDescendants, useDescendant } from \"@chakra-ui/descendant\"\nimport { useControllableState, useId } from \"@chakra-ui/hooks\"\nimport {\n  mergeRefs,\n  callAllHandlers,\n  createContext,\n  ariaAttr,\n} from \"@chakra-ui/utils\"\nimport {\n  useState,\n  useEffect,\n  useRef,\n  useCallback,\n  ChangeEvent,\n  ChangeEventHandler,\n  KeyboardEventHandler,\n  KeyboardEvent,\n  InputHTMLAttributes,\n  FocusEventHandler,\n  Ref,\n} from \"react\"\n\nexport type PinInputContext = UsePinInputReturn & {\n  /**\n   * Sets the pin input component to the disabled state\n   */\n  isDisabled?: boolean\n  /**\n   * Sets the pin input component to the invalid state\n   */\n  isInvalid?: boolean\n}\n\nconst [PinInputProvider, usePinInputContext] = createContext<PinInputContext>({\n  name: \"PinInputContext\",\n  errorMessage:\n    \"usePinInputContext: `context` is undefined. Seems you forgot to all pin input fields within `<PinInput />`\",\n})\n\nexport { PinInputProvider, usePinInputContext }\n\nexport interface UsePinInputProps {\n  /**\n   * If `true`, the pin input receives focus on mount\n   */\n  autoFocus?: boolean\n  /**\n   * The value of the the pin input. This is the value\n   * that will be returned when the pin input is filled\n   */\n  value?: string\n  /**\n   * The default value of the pin input\n   */\n  defaultValue?: string\n  /**\n   * Function called on input change\n   */\n  onChange?: (value: string) => void\n  /**\n   * Function called when all inputs have valid values\n   */\n  onComplete?: (value: string) => void\n  /**\n   * The placeholder for the pin input\n   */\n  placeholder?: string\n  /**\n   * If `true`, focus will move automatically to the next input once filled\n   * @default true\n   */\n  manageFocus?: boolean\n  /**\n   * The base id string that will be applied to the input fields.\n   * The index of the input will be appended to this base id.\n   *\n   * @example\n   * if id=\"foo\", the first input will have `foo-0`\n   */\n  id?: string\n  /**\n   * If `true`, the pin input component is put in the disabled state\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the pin input component is put in the invalid state\n   */\n  isInvalid?: boolean\n}\n\nfunction toArray(value?: string) {\n  if (typeof value === \"string\") {\n    return value.split(\"\")\n  }\n  return undefined\n}\n\nexport function usePinInput(props: UsePinInputProps = {}) {\n  const {\n    autoFocus,\n    value,\n    defaultValue,\n    onChange,\n    onComplete,\n    placeholder = \"â—‹\",\n    manageFocus = true,\n    id: idProp,\n    isDisabled,\n    isInvalid,\n  } = props\n\n  const uuid = useId()\n  const id = idProp ?? `pin-input-${uuid}`\n\n  const domContext = useDescendants<HTMLInputElement, {}>()\n  const { descendants } = domContext\n\n  const [moveFocus, setMoveFocus] = useState(true)\n\n  const [values, setValues] = useControllableState<string[]>({\n    defaultValue: toArray(defaultValue) || [],\n    value: toArray(value),\n    onChange: (values) => onChange?.(values.join(\"\")),\n  })\n\n  useEffect(() => {\n    if (autoFocus) {\n      const firstInput = descendants[0]\n      firstInput?.element?.focus()\n    }\n  }, [descendants, autoFocus])\n\n  const focusNext = useCallback(\n    (index: number) => {\n      if (!moveFocus || !manageFocus) return\n\n      const nextInput = descendants[index + 1]\n      nextInput?.element?.focus()\n    },\n    [descendants, moveFocus, manageFocus],\n  )\n\n  const setValue = useCallback(\n    (value: string, index: number) => {\n      const nextValues = [...values]\n      nextValues[index] = value\n      setValues(nextValues)\n\n      // if we're at the last input, call onComplete (no need to move focus)\n      if (index === descendants.length - 1) {\n        onComplete?.(nextValues.join(\"\"))\n      } else {\n        focusNext(index)\n      }\n    },\n    [values, setValues, focusNext, onComplete, descendants.length],\n  )\n\n  const clear = useCallback(() => {\n    const values: string[] = Array(descendants.length).fill(\"\")\n    setValues(values)\n    const firstInput = descendants[0]\n    firstInput.element?.focus()\n  }, [descendants, setValues])\n\n  return {\n    id,\n    domContext,\n    setValue,\n    values,\n    setValues,\n    setMoveFocus,\n    clear,\n    onComplete,\n    placeholder,\n    manageFocus,\n    isDisabled,\n    isInvalid,\n  }\n}\n\nexport type UsePinInputReturn = ReturnType<typeof usePinInput>\n\nexport interface UsePinInputFieldProps {\n  ref?: Ref<HTMLInputElement>\n  onChange?: ChangeEventHandler\n  onKeyDown?: KeyboardEventHandler\n  onFocus?: FocusEventHandler\n  onBlur?: FocusEventHandler\n}\n\nexport function usePinInputField(props: UsePinInputFieldProps = {}) {\n  const { ref: forwardedRef, ...rest } = props\n\n  const ref = useRef<HTMLInputElement>(null)\n\n  const {\n    id,\n    isDisabled,\n    isInvalid,\n    setValue,\n    values,\n    setMoveFocus,\n    setValues,\n    domContext,\n    placeholder,\n    manageFocus,\n  } = usePinInputContext()\n\n  const { descendants } = domContext\n\n  const index = useDescendant({\n    context: domContext,\n    element: ref.current,\n  })\n\n  const getNextValue = useCallback(\n    (currentValue: string, eventValue: string) => {\n      let nextValue = eventValue\n      if (currentValue && currentValue.length > 0) {\n        const [firstValue, secondValue] = eventValue\n        if (currentValue[0] === firstValue) {\n          nextValue = secondValue\n        } else if (currentValue[0] === secondValue) {\n          nextValue = firstValue\n        }\n      }\n      return nextValue\n    },\n    [],\n  )\n\n  // Improved from: https://github.com/uber/baseweb/blob/master/src/pin-code/pin-code.js\n  const onChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      const eventValue = event.target.value\n      const currentValue = values[index]\n      const nextValue = getNextValue(currentValue, eventValue)\n\n      // if the value was removed using backspace\n      if (nextValue === \"\") {\n        setValue(\"\", index)\n        return\n      }\n\n      // in the case of an autocomplete or copy and paste\n      if (eventValue.length > 2) {\n        // see if we can use the string to fill out our values\n        if (eventValue.match(/^[0-9]+$/)) {\n          const { length } = descendants\n          // ensure the value matches the number of inputs\n          const nextValue = eventValue.split(\"\").filter((_, i) => i < length)\n          setValues(nextValue)\n        }\n        return\n      }\n\n      // only set if the new value is a number\n      if (nextValue.match(/^[0-9]$/)) {\n        setValue(nextValue, index)\n      }\n\n      setMoveFocus(true)\n    },\n    [\n      values,\n      index,\n      getNextValue,\n      setMoveFocus,\n      setValue,\n      descendants.length,\n      setValues,\n    ],\n  )\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === \"Backspace\" && manageFocus) {\n        if ((event.target as HTMLInputElement).value === \"\") {\n          const prevInput = descendants[index - 1]\n          if (prevInput) {\n            setValue(\"\", index - 1)\n            prevInput.element?.focus()\n            setMoveFocus(true)\n          }\n        } else {\n          setMoveFocus(false)\n        }\n      }\n    },\n    [descendants, index, setValue, setMoveFocus, manageFocus],\n  )\n\n  const [hasFocus, setHasFocus] = useState(false)\n\n  const onFocus = useCallback(() => {\n    setHasFocus(true)\n  }, [])\n\n  const onBlur = useCallback(() => {\n    setHasFocus(false)\n  }, [])\n\n  return {\n    ...rest,\n    id: `${id}-${index}`,\n    disabled: isDisabled,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    ref: mergeRefs(ref, forwardedRef),\n    onChange: callAllHandlers(rest.onChange, onChange),\n    onKeyDown: callAllHandlers(rest.onKeyDown, onKeyDown),\n    onFocus: callAllHandlers(rest.onFocus, onFocus),\n    onBlur: callAllHandlers(rest.onBlur, onBlur),\n    value: values[index] || \"\",\n    inputMode: \"numeric\" as InputHTMLAttributes<any>[\"inputMode\"],\n    \"aria-label\": rest[\"aria-label\"] || \"Please enter your pin code\",\n    autoComplete: \"not-allowed\",\n    placeholder: hasFocus ? \"\" : placeholder,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}