{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { cx, warn, __DEV__ } from \"@chakra-ui/utils\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport * as React from \"react\";\nimport { EASINGS } from \"./__utils\";\nvar variants = {\n  exit: props => _extends({}, props.animateOpacity && {\n    opacity: parseInt(props.startingHeight, 10) > 0 ? 1 : 0\n  }, {\n    height: props.startingHeight,\n    transition: {\n      duration: 0.2,\n      ease: EASINGS.easeInOut\n    }\n  }),\n  enter: props => _extends({}, props.animateOpacity && {\n    opacity: 1\n  }, {\n    height: props.endingHeight,\n    transition: {\n      duration: 0.3,\n      ease: EASINGS.easeInOut\n    }\n  })\n};\nexport var Collapse = /*#__PURE__*/React.forwardRef(function Collapse(props, ref) {\n  var {\n    in: isOpen,\n    unmountOnExit,\n    animateOpacity = true,\n    startingHeight = 0,\n    endingHeight = \"auto\",\n    style,\n    className,\n    onAnimationComplete: _onAnimationComplete\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"in\", \"unmountOnExit\", \"animateOpacity\", \"startingHeight\", \"endingHeight\", \"style\", \"className\", \"onAnimationComplete\"]);\n\n  var [ariaHidden, setAriaHidden] = React.useState(() => {\n    // If it's open by default, no need to apply `aria-hidden`\n    if (isOpen) return false; // If startingHeight > 0, then content is partially visible\n\n    if (parseInt(props.startingHeight, 10) > 0) return false; // Else, the content is hidden\n\n    return true;\n  });\n  /**\n   * Warn ðŸš¨: `startingHeight` and `unmountOnExit` are mutually exclusive\n   *\n   * If you specify a starting height, the collapsed needs to be mounted\n   * for the height to take effect.\n   */\n\n  if (startingHeight > 0 && unmountOnExit) {\n    warn(\"startingHeight and unmountOnExit are mutually exclusive. You can't use them together\");\n  }\n\n  var shouldExpand = unmountOnExit ? isOpen && unmountOnExit : true;\n  var custom = {\n    startingHeight,\n    endingHeight,\n    animateOpacity\n  };\n  return /*#__PURE__*/React.createElement(AnimatePresence, {\n    initial: false,\n    custom: custom\n  }, shouldExpand && /*#__PURE__*/React.createElement(motion.div, _extends({\n    ref: ref,\n    \"aria-hidden\": ariaHidden ? \"true\" : undefined,\n    onAnimationComplete: () => {\n      setAriaHidden(c => !c);\n      _onAnimationComplete == null ? void 0 : _onAnimationComplete();\n    },\n    className: cx(\"chakra-collapse\", className),\n    initial: \"exit\",\n    animate: isOpen || unmountOnExit ? \"enter\" : \"exit\",\n    exit: \"exit\"\n  }, rest, {\n    variants: variants,\n    style: _extends({\n      overflow: \"hidden\"\n    }, style),\n    custom: custom\n  })));\n});\n\nif (__DEV__) {\n  Collapse.displayName = \"Collapse\";\n}","map":{"version":3,"sources":["../../src/collapse.tsx"],"names":["variants","exit","props","opacity","parseInt","height","transition","duration","ease","EASINGS","easeInOut","enter","Collapse","in","animateOpacity","startingHeight","endingHeight","onAnimationComplete","rest","warn","shouldExpand","unmountOnExit","isOpen","custom","ariaHidden","setAriaHidden","c","cx","overflow"],"mappings":"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","sourcesContent":["import { cx, warn, __DEV__ } from \"@chakra-ui/utils\"\nimport { AnimatePresence, HTMLMotionProps, motion } from \"framer-motion\"\nimport * as React from \"react\"\nimport { EASINGS, MotionVariants } from \"./__utils\"\n\ntype CollapseVariants = MotionVariants<\"enter\" | \"exit\">\n\nconst variants: CollapseVariants = {\n  exit: (props: CollapseOptions) => ({\n    ...(props.animateOpacity && {\n      opacity: parseInt(props.startingHeight as string, 10) > 0 ? 1 : 0,\n    }),\n    height: props.startingHeight,\n    transition: { duration: 0.2, ease: EASINGS.easeInOut },\n  }),\n  enter: (props: CollapseOptions) => ({\n    ...(props.animateOpacity && {\n      opacity: 1,\n    }),\n    height: props.endingHeight,\n    transition: {\n      duration: 0.3,\n      ease: EASINGS.easeInOut,\n    },\n  }),\n}\n\nexport interface CollapseOptions {\n  /**\n   * If `true`, the opacity of the content will be animated\n   */\n  animateOpacity?: boolean\n  /**\n   * If `true`, the collapse will unmount when `in={false}` and animation is done\n   */\n  unmountOnExit?: boolean\n  /**\n   * If `true`, the content will be expanded\n   */\n  in?: boolean\n  /**\n   * The height you want the content in it's collapsed state. Set to `0` by default\n   */\n  startingHeight?: number | string\n  /**\n   * The height you want the content in it's expanded state. Set to `auto` by default\n   */\n  endingHeight?: number | string\n}\n\nexport type ICollapse = CollapseProps\n\nexport interface CollapseProps\n  extends HTMLMotionProps<\"div\">,\n    CollapseOptions {}\n\nexport const Collapse = React.forwardRef<HTMLDivElement, CollapseProps>(\n  function Collapse(props, ref) {\n    const {\n      in: isOpen,\n      unmountOnExit,\n      animateOpacity = true,\n      startingHeight = 0,\n      endingHeight = \"auto\",\n      style,\n      className,\n      onAnimationComplete,\n      ...rest\n    } = props\n\n    const [ariaHidden, setAriaHidden] = React.useState(() => {\n      // If it's open by default, no need to apply `aria-hidden`\n      if (isOpen) return false\n      // If startingHeight > 0, then content is partially visible\n      if (parseInt(props.startingHeight as string, 10) > 0) return false\n      // Else, the content is hidden\n      return true\n    })\n\n    /**\n     * Warn ðŸš¨: `startingHeight` and `unmountOnExit` are mutually exclusive\n     *\n     * If you specify a starting height, the collapsed needs to be mounted\n     * for the height to take effect.\n     */\n    if (startingHeight > 0 && unmountOnExit) {\n      warn(\n        `startingHeight and unmountOnExit are mutually exclusive. You can't use them together`,\n      )\n    }\n\n    const shouldExpand = unmountOnExit ? isOpen && unmountOnExit : true\n\n    const custom = { startingHeight, endingHeight, animateOpacity }\n\n    return (\n      <AnimatePresence initial={false} custom={custom}>\n        {shouldExpand && (\n          <motion.div\n            ref={ref}\n            aria-hidden={ariaHidden ? \"true\" : undefined}\n            onAnimationComplete={() => {\n              setAriaHidden((c) => !c)\n              onAnimationComplete?.()\n            }}\n            className={cx(\"chakra-collapse\", className)}\n            initial=\"exit\"\n            animate={isOpen || unmountOnExit ? \"enter\" : \"exit\"}\n            exit=\"exit\"\n            {...rest}\n            variants={variants}\n            style={{ overflow: \"hidden\", ...style }}\n            custom={custom}\n          />\n        )}\n      </AnimatePresence>\n    )\n  },\n)\n\nif (__DEV__) {\n  Collapse.displayName = \"Collapse\"\n}\n"]},"metadata":{},"sourceType":"module"}