{"ast":null,"code":"import { createParser, system } from \"@styled-system/core\";\nvar config = {\n  gridGap: {\n    property: \"gridGap\",\n    scale: \"space\"\n  },\n  gridColumnGap: {\n    property: \"gridColumnGap\",\n    scale: \"space\"\n  },\n  gridRowGap: {\n    property: \"gridRowGap\",\n    scale: \"space\"\n  },\n  gridColumn: true,\n  gridRow: true,\n  gridAutoFlow: true,\n  gridAutoColumns: true,\n  gridColumnStart: true,\n  gridColumnEnd: true,\n  gridAutoRows: true,\n  gridTemplateColumns: true,\n  gridTemplateRows: true,\n  gridTemplateAreas: true,\n  gridArea: true,\n  placeItems: true\n};\n/**\n * Types for grid related CSS properties\n */\n\nexport var grid = system(config);\nexport var gridParser = createParser(config);","map":{"version":3,"sources":["../../../src/config/grid.ts"],"names":["config","gridGap","property","scale","gridColumnGap","gridRowGap","gridColumn","gridRow","gridAutoFlow","gridAutoColumns","gridColumnStart","gridColumnEnd","gridAutoRows","gridTemplateColumns","gridTemplateRows","gridTemplateAreas","gridArea","placeItems","grid","system","gridParser","createParser"],"mappings":"AACA,SAAA,YAAA,EAAA,MAAA,QAAA,qBAAA;AAGA,IAAMA,MAAc,GAAG;AACrBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,QAAQ,EADD,SAAA;AAEPC,IAAAA,KAAK,EAAE;AAFA,GADY;AAKrBC,EAAAA,aAAa,EAAE;AACbF,IAAAA,QAAQ,EADK,eAAA;AAEbC,IAAAA,KAAK,EAAE;AAFM,GALM;AASrBE,EAAAA,UAAU,EAAE;AACVH,IAAAA,QAAQ,EADE,YAAA;AAEVC,IAAAA,KAAK,EAAE;AAFG,GATS;AAarBG,EAAAA,UAAU,EAbW,IAAA;AAcrBC,EAAAA,OAAO,EAdc,IAAA;AAerBC,EAAAA,YAAY,EAfS,IAAA;AAgBrBC,EAAAA,eAAe,EAhBM,IAAA;AAiBrBC,EAAAA,eAAe,EAjBM,IAAA;AAkBrBC,EAAAA,aAAa,EAlBQ,IAAA;AAmBrBC,EAAAA,YAAY,EAnBS,IAAA;AAoBrBC,EAAAA,mBAAmB,EApBE,IAAA;AAqBrBC,EAAAA,gBAAgB,EArBK,IAAA;AAsBrBC,EAAAA,iBAAiB,EAtBI,IAAA;AAuBrBC,EAAAA,QAAQ,EAvBa,IAAA;AAwBrBC,EAAAA,UAAU,EAAE;AAxBS,CAAvB;AA2BA;AACA;AACA;;AAkEA,OAAO,IAAMC,IAAI,GAAGC,MAAM,CAAnB,MAAmB,CAAnB;AACP,OAAO,IAAMC,UAAU,GAAGC,YAAY,CAA/B,MAA+B,CAA/B","sourcesContent":["import * as CSS from \"csstype\"\nimport { createParser, Config, system } from \"@styled-system/core\"\nimport { Length, ResponsiveValue } from \"../utils\"\n\nconst config: Config = {\n  gridGap: {\n    property: \"gridGap\",\n    scale: \"space\",\n  },\n  gridColumnGap: {\n    property: \"gridColumnGap\",\n    scale: \"space\",\n  },\n  gridRowGap: {\n    property: \"gridRowGap\",\n    scale: \"space\",\n  },\n  gridColumn: true,\n  gridRow: true,\n  gridAutoFlow: true,\n  gridAutoColumns: true,\n  gridColumnStart: true,\n  gridColumnEnd: true,\n  gridAutoRows: true,\n  gridTemplateColumns: true,\n  gridTemplateRows: true,\n  gridTemplateAreas: true,\n  gridArea: true,\n  placeItems: true,\n}\n\n/**\n * Types for grid related CSS properties\n */\nexport interface GridProps {\n  /**\n   * The CSS `grid-gap` property\n   */\n  gridGap?: ResponsiveValue<CSS.Property.GridGap<Length>>\n  /**\n   * The CSS `grid-column-gap` property\n   */\n  gridColumnGap?: ResponsiveValue<CSS.Property.GridColumnGap<Length>>\n  /**\n   * The CSS `grid-row-gap` property\n   */\n  gridRowGap?: ResponsiveValue<CSS.Property.GridRowGap<Length>>\n  /**\n   * The CSS `grid-column` property\n   */\n  gridColumnStart?: ResponsiveValue<CSS.Property.GridColumnStart>\n  /**\n   * The CSS `grid-column` property\n   */\n  gridColumnEnd?: ResponsiveValue<CSS.Property.GridColumnEnd>\n  /**\n   * The CSS `grid-column` property\n   */\n  gridColumn?: ResponsiveValue<CSS.Property.GridColumn>\n  /**\n   * The CSS `grid-row` property\n   */\n  gridRow?: ResponsiveValue<CSS.Property.GridRow>\n  /**\n   * The CSS `grid-auto-flow` property\n   */\n  gridAutoFlow?: ResponsiveValue<CSS.Property.GridAutoFlow>\n  /**\n   * The CSS `grid-auto-columns` property\n   */\n  gridAutoColumns?: ResponsiveValue<CSS.Property.GridAutoColumns<Length>>\n  /**\n   * The CSS `grid-auto-rows` property\n   */\n  gridAutoRows?: ResponsiveValue<CSS.Property.GridAutoRows<Length>>\n  /**\n   * The CSS `grid-template-columns` property\n   */\n  gridTemplateColumns?: ResponsiveValue<\n    CSS.Property.GridTemplateColumns<Length>\n  >\n  /**\n   * The CSS `grid-template-rows` property\n   */\n  gridTemplateRows?: ResponsiveValue<CSS.Property.GridTemplateRows<Length>>\n  /**\n   * The CSS `grid-template-areas` property\n   */\n  gridTemplateAreas?: ResponsiveValue<CSS.Property.GridTemplateAreas>\n  /**\n   * The CSS `grid-areas` property\n   */\n  gridArea?: ResponsiveValue<CSS.Property.GridArea>\n  /**\n   * The CSS `place-items` property\n   */\n  placeItems?: ResponsiveValue<CSS.Property.PlaceItems>\n}\n\nexport const grid = system(config)\nexport const gridParser = createParser(config)\n"]},"metadata":{},"sourceType":"module"}