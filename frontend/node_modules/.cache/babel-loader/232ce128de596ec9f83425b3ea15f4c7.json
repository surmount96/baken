{"ast":null,"code":"import { keyframes } from \"@chakra-ui/system\";\nimport { isFunction, valueToPercent } from \"@chakra-ui/utils\";\nexport var spin = keyframes({\n  \"0%\": {\n    strokeDasharray: \"1, 400\",\n    strokeDashoffset: \"0\"\n  },\n  \"50%\": {\n    strokeDasharray: \"400, 400\",\n    strokeDashoffset: \"-100\"\n  },\n  \"100%\": {\n    strokeDasharray: \"400, 400\",\n    strokeDashoffset: \"-260\"\n  }\n});\nexport var rotate = keyframes({\n  \"0%\": {\n    transform: \"rotate(0deg)\"\n  },\n  \"100%\": {\n    transform: \"rotate(360deg)\"\n  }\n});\nexport var progress = keyframes({\n  \"0%\": {\n    left: \"-40%\"\n  },\n  \"100%\": {\n    left: \"100%\"\n  }\n});\nexport var stripe = keyframes({\n  from: {\n    backgroundPosition: \"1rem 0\"\n  },\n  to: {\n    backgroundPosition: \"0 0\"\n  }\n});\n/**\n * Get the common `aria-*` attributes for both the linear and circular\n * progress components.\n */\n\nexport function getProgressProps(options) {\n  var {\n    value = 0,\n    min,\n    max,\n    valueText,\n    getValueText,\n    isIndeterminate\n  } = options;\n  var percent = valueToPercent(value, min, max);\n\n  var getAriaValueText = () => {\n    if (value == null) return undefined;\n    return isFunction(getValueText) ? getValueText(value, percent) : valueText;\n  };\n\n  return {\n    bind: {\n      \"data-indeterminate\": isIndeterminate ? \"\" : undefined,\n      \"aria-valuemax\": max,\n      \"aria-valuemin\": min,\n      \"aria-valuenow\": isIndeterminate ? undefined : value,\n      \"aria-valuetext\": getAriaValueText(),\n      role: \"progressbar\"\n    },\n    percent\n  };\n}","map":{"version":3,"sources":["../../src/progress.utils.tsx"],"names":["spin","keyframes","strokeDasharray","strokeDashoffset","rotate","transform","progress","left","stripe","from","backgroundPosition","to","value","isIndeterminate","percent","valueToPercent","getAriaValueText","isFunction","getValueText","bind","role"],"mappings":"AAAA,SAAA,SAAA,QAAA,mBAAA;AACA,SAAA,UAAA,EAAA,cAAA,QAAA,kBAAA;AAEA,OAAO,IAAMA,IAAI,GAAGC,SAAS,CAAC;AAC5B,QAAM;AACJC,IAAAA,eAAe,EADX,QAAA;AAEJC,IAAAA,gBAAgB,EAAE;AAFd,GADsB;AAK5B,SAAO;AACLD,IAAAA,eAAe,EADV,UAAA;AAELC,IAAAA,gBAAgB,EAAE;AAFb,GALqB;AAS5B,UAAQ;AACND,IAAAA,eAAe,EADT,UAAA;AAENC,IAAAA,gBAAgB,EAAE;AAFZ;AAToB,CAAD,CAAtB;AAeP,OAAO,IAAMC,MAAM,GAAGH,SAAS,CAAC;AAC9B,QAAM;AACJI,IAAAA,SAAS,EAAE;AADP,GADwB;AAI9B,UAAQ;AACNA,IAAAA,SAAS,EAAE;AADL;AAJsB,CAAD,CAAxB;AASP,OAAO,IAAMC,QAAQ,GAAGL,SAAS,CAAC;AAChC,QAAM;AAAEM,IAAAA,IAAI,EAAE;AAAR,GAD0B;AAEhC,UAAQ;AAAEA,IAAAA,IAAI,EAAE;AAAR;AAFwB,CAAD,CAA1B;AAKP,OAAO,IAAMC,MAAM,GAAGP,SAAS,CAAC;AAC9BQ,EAAAA,IAAI,EAAE;AAAEC,IAAAA,kBAAkB,EAAE;AAAtB,GADwB;AAE9BC,EAAAA,EAAE,EAAE;AAAED,IAAAA,kBAAkB,EAAE;AAAtB;AAF0B,CAAD,CAAxB;AAcP;AACA;AACA;AACA;;AACA,OAAO,SAAA,gBAAA,CAAA,OAAA,EAA4D;AACjE,MAAM;AACJE,IAAAA,KAAK,GADD,CAAA;AAAA,IAAA,GAAA;AAAA,IAAA,GAAA;AAAA,IAAA,SAAA;AAAA,IAAA,YAAA;AAMJC,IAAAA;AANI,MAAN,OAAA;AASA,MAAMC,OAAO,GAAGC,cAAc,CAAA,KAAA,EAAA,GAAA,EAA9B,GAA8B,CAA9B;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;AAC7B,QAAIJ,KAAK,IAAT,IAAA,EAAmB,OAAA,SAAA;AACnB,WAAOK,UAAU,CAAVA,YAAU,CAAVA,GAA2BC,YAAY,CAAA,KAAA,EAAvCD,OAAuC,CAAvCA,GAAP,SAAA;AAFF,GAAA;;AAKA,SAAO;AACLE,IAAAA,IAAI,EAAE;AACJ,4BAAsBN,eAAe,GAAA,EAAA,GADjC,SAAA;AAEJ,uBAFI,GAAA;AAGJ,uBAHI,GAAA;AAIJ,uBAAiBA,eAAe,GAAA,SAAA,GAJ5B,KAAA;AAKJ,wBAAkBG,gBALd,EAAA;AAMJI,MAAAA,IAAI,EAAE;AANF,KADD;AASLN,IAAAA;AATK,GAAP;AAWD","sourcesContent":["import { keyframes } from \"@chakra-ui/system\"\nimport { isFunction, valueToPercent } from \"@chakra-ui/utils\"\n\nexport const spin = keyframes({\n  \"0%\": {\n    strokeDasharray: \"1, 400\",\n    strokeDashoffset: \"0\",\n  },\n  \"50%\": {\n    strokeDasharray: \"400, 400\",\n    strokeDashoffset: \"-100\",\n  },\n  \"100%\": {\n    strokeDasharray: \"400, 400\",\n    strokeDashoffset: \"-260\",\n  },\n})\n\nexport const rotate = keyframes({\n  \"0%\": {\n    transform: \"rotate(0deg)\",\n  },\n  \"100%\": {\n    transform: \"rotate(360deg)\",\n  },\n})\n\nexport const progress = keyframes({\n  \"0%\": { left: \"-40%\" },\n  \"100%\": { left: \"100%\" },\n})\n\nexport const stripe = keyframes({\n  from: { backgroundPosition: \"1rem 0\" },\n  to: { backgroundPosition: \"0 0\" },\n})\n\nexport interface GetProgressPropsOptions {\n  value?: number\n  min: number\n  max: number\n  valueText?: string\n  getValueText?(value: number, percent: number): string\n  isIndeterminate?: boolean\n}\n\n/**\n * Get the common `aria-*` attributes for both the linear and circular\n * progress components.\n */\nexport function getProgressProps(options: GetProgressPropsOptions) {\n  const {\n    value = 0,\n    min,\n    max,\n    valueText,\n    getValueText,\n    isIndeterminate,\n  } = options\n\n  const percent = valueToPercent(value, min, max)\n\n  const getAriaValueText = () => {\n    if (value == null) return undefined\n    return isFunction(getValueText) ? getValueText(value, percent) : valueText\n  }\n\n  return {\n    bind: {\n      \"data-indeterminate\": isIndeterminate ? \"\" : undefined,\n      \"aria-valuemax\": max,\n      \"aria-valuemin\": min,\n      \"aria-valuenow\": isIndeterminate ? undefined : value,\n      \"aria-valuetext\": getAriaValueText(),\n      role: \"progressbar\",\n    },\n    percent,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}