{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { chakra, forwardRef, omitThemingProps, StylesProvider, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { cx, getValidChildren, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nexport var InputGroup = /*#__PURE__*/forwardRef(function InputGroup(props, ref) {\n  var styles = useMultiStyleConfig(\"Input\", props);\n\n  var _omitThemingProps = omitThemingProps(props),\n      {\n    children,\n    className\n  } = _omitThemingProps,\n      rest = _objectWithoutPropertiesLoose(_omitThemingProps, [\"children\", \"className\"]);\n\n  var _className = cx(\"chakra-input__group\", className);\n\n  var stylesRef = React.useRef({});\n  var validChildren = getValidChildren(children);\n  var input = styles.field;\n  validChildren.forEach(child => {\n    if (!styles) return;\n\n    if (input && child.type.id === \"InputLeftElement\") {\n      var _input$height;\n\n      stylesRef.current.paddingLeft = (_input$height = input.height) != null ? _input$height : input.h;\n    }\n\n    if (input && child.type.id === \"InputRightElement\") {\n      var _input$height2;\n\n      stylesRef.current.paddingRight = (_input$height2 = input.height) != null ? _input$height2 : input.h;\n    }\n\n    if (child.type.id === \"InputRightAddon\") {\n      stylesRef.current.borderRightRadius = 0;\n    }\n\n    if (child.type.id === \"InputLeftAddon\") {\n      stylesRef.current.borderLeftRadius = 0;\n    }\n  });\n  var clones = validChildren.map(child => {\n    var _child$props, _child$props2, _ref, _stylesRef$current, _ref2, _stylesRef$current2, _stylesRef$current3, _stylesRef$current4;\n\n    var {\n      pl,\n      paddingLeft,\n      pr,\n      paddingRight\n    } = child.props;\n    /**\n     * Make it possible to override the size and variant from `Input`\n     */\n\n    var theming = {\n      size: ((_child$props = child.props) == null ? void 0 : _child$props.size) || props.size,\n      variant: ((_child$props2 = child.props) == null ? void 0 : _child$props2.variant) || props.variant\n    };\n    return child.type.id !== \"Input\" ? /*#__PURE__*/React.cloneElement(child, theming) : /*#__PURE__*/React.cloneElement(child, _extends({}, theming, {\n      paddingLeft: (_ref = pl != null ? pl : paddingLeft) != null ? _ref : (_stylesRef$current = stylesRef.current) == null ? void 0 : _stylesRef$current.paddingLeft,\n      paddingRight: (_ref2 = pr != null ? pr : paddingRight) != null ? _ref2 : (_stylesRef$current2 = stylesRef.current) == null ? void 0 : _stylesRef$current2.paddingRight,\n      borderLeftRadius: (_stylesRef$current3 = stylesRef.current) == null ? void 0 : _stylesRef$current3.borderLeftRadius,\n      borderRightRadius: (_stylesRef$current4 = stylesRef.current) == null ? void 0 : _stylesRef$current4.borderRightRadius\n    }));\n  });\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    className: _className,\n    ref: ref,\n    __css: {\n      width: \"100%\",\n      display: \"flex\",\n      position: \"relative\"\n    }\n  }, rest), /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, clones));\n});\n\nif (__DEV__) {\n  InputGroup.displayName = \"InputGroup\";\n}","map":{"version":3,"sources":["../../src/input-group.tsx"],"names":["InputGroup","forwardRef","styles","useMultiStyleConfig","className","rest","omitThemingProps","_className","cx","stylesRef","React","validChildren","getValidChildren","input","child","clones","paddingRight","theming","size","props","variant","paddingLeft","pl","pr","borderLeftRadius","borderRightRadius","width","display","position"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  StylesProvider,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, getValidChildren, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface InputGroupProps extends HTMLChakraProps<\"div\">, ThemingProps {}\n\nexport const InputGroup = forwardRef<InputGroupProps, \"div\">(\n  function InputGroup(props, ref) {\n    const styles = useMultiStyleConfig(\"Input\", props)\n    const { children, className, ...rest } = omitThemingProps(props)\n\n    const _className = cx(\"chakra-input__group\", className)\n    const stylesRef = React.useRef<InputGroupProps>({})\n\n    const validChildren = getValidChildren(children)\n\n    const input: any = styles.field\n\n    validChildren.forEach((child: any) => {\n      if (!styles) return\n\n      if (input && child.type.id === \"InputLeftElement\") {\n        stylesRef.current.paddingLeft = input.height ?? input.h\n      }\n\n      if (input && child.type.id === \"InputRightElement\") {\n        stylesRef.current.paddingRight = input.height ?? input.h\n      }\n\n      if (child.type.id === \"InputRightAddon\") {\n        stylesRef.current.borderRightRadius = 0\n      }\n\n      if (child.type.id === \"InputLeftAddon\") {\n        stylesRef.current.borderLeftRadius = 0\n      }\n    })\n\n    const clones = validChildren.map((child: any) => {\n      const { pl, paddingLeft, pr, paddingRight } = child.props\n\n      /**\n       * Make it possible to override the size and variant from `Input`\n       */\n      const theming = {\n        size: child.props?.size || props.size,\n        variant: child.props?.variant || props.variant,\n      }\n\n      return child.type.id !== \"Input\"\n        ? React.cloneElement(child, theming)\n        : React.cloneElement(child, {\n            ...theming,\n            paddingLeft: pl ?? paddingLeft ?? stylesRef.current?.paddingLeft,\n            paddingRight: pr ?? paddingRight ?? stylesRef.current?.paddingRight,\n            borderLeftRadius: stylesRef.current?.borderLeftRadius,\n            borderRightRadius: stylesRef.current?.borderRightRadius,\n          })\n    })\n\n    return (\n      <chakra.div\n        className={_className}\n        ref={ref}\n        __css={{\n          width: \"100%\",\n          display: \"flex\",\n          position: \"relative\",\n        }}\n        {...rest}\n      >\n        <StylesProvider value={styles}>{clones}</StylesProvider>\n      </chakra.div>\n    )\n  },\n)\n\nif (__DEV__) {\n  InputGroup.displayName = \"InputGroup\"\n}\n"]},"metadata":{},"sourceType":"module"}