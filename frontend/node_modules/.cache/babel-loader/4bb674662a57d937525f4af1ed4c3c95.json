{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { dataAttr, isRightClick, mergeRefs } from \"@chakra-ui/utils\";\nimport { useCallback, useState } from \"react\";\n/**\n * useClickable\n *\n * React hook that implements all the interactions of a native `button`\n * component with support for making it focusable even if it's disabled.\n *\n * It can be used with both native button elements or other elements (like `div`).\n */\n\nexport function useClickable(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    ref: htmlRef,\n    isDisabled,\n    isFocusable,\n    clickOnEnter = true,\n    clickOnSpace = true,\n    onMouseDown,\n    onMouseUp,\n    onClick,\n    onKeyDown,\n    onKeyUp,\n    tabIndex: tabIndexProp,\n    onMouseOver\n  } = props,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"ref\", \"isDisabled\", \"isFocusable\", \"clickOnEnter\", \"clickOnSpace\", \"onMouseDown\", \"onMouseUp\", \"onClick\", \"onKeyDown\", \"onKeyUp\", \"tabIndex\", \"onMouseOver\"]);\n  /**\n   * We'll use this to track if the element is a button element\n   */\n\n\n  var [isButton, setIsButton] = useState(true);\n  /**\n   * For custom button implementation, we'll use this to track when\n   * we mouse down on the button, to enable use style it's \":active\" style\n   */\n\n  var [isActive, setIsActive] = useState(false);\n  /**\n   * The ref callback that fires as soon as the dom node is ready\n   */\n\n  var refCallback = useCallback(node => {\n    if ((node == null ? void 0 : node.tagName) !== \"BUTTON\") {\n      setIsButton(false);\n    }\n  }, []);\n  var tabIndex = isButton ? tabIndexProp : tabIndexProp || 0;\n  var trulyDisabled = isDisabled && !isFocusable;\n  var handleClick = useCallback(event => {\n    if (isDisabled) {\n      event.stopPropagation();\n      event.preventDefault();\n      return;\n    }\n\n    var self = event.currentTarget;\n    self.focus();\n    onClick == null ? void 0 : onClick(event);\n  }, [isDisabled, onClick]);\n  var handleKeyDown = useCallback(event => {\n    onKeyDown == null ? void 0 : onKeyDown(event);\n\n    if (isDisabled || event.defaultPrevented || event.metaKey) {\n      return;\n    }\n\n    var shouldClickOnEnter = clickOnEnter && event.key === \"Enter\";\n    var shouldClickOnSpace = clickOnSpace && event.key === \" \";\n\n    if (!isButton && shouldClickOnSpace) {\n      event.preventDefault();\n      setIsActive(true);\n      return;\n    }\n\n    if (!isButton && shouldClickOnEnter) {\n      event.preventDefault();\n      var self = event.currentTarget;\n      self.click();\n    }\n  }, [isDisabled, isButton, onKeyDown, clickOnEnter, clickOnSpace]);\n  var handleKeyUp = useCallback(event => {\n    onKeyUp == null ? void 0 : onKeyUp(event);\n    if (isDisabled || event.defaultPrevented || event.metaKey) return;\n    var shouldClickOnSpace = clickOnSpace && event.key === \" \";\n\n    if (!isButton && shouldClickOnSpace) {\n      event.preventDefault();\n      setIsActive(false);\n      var self = event.currentTarget;\n      self.click();\n    }\n  }, [clickOnSpace, isButton, isDisabled, onKeyUp]);\n  var handleMouseDown = useCallback(event => {\n    /**\n     * Prevent right-click from triggering the\n     * active state.\n     */\n    if (isRightClick(event)) return;\n\n    if (isDisabled) {\n      event.stopPropagation();\n      event.preventDefault();\n      return;\n    }\n\n    if (!isButton) {\n      setIsActive(true);\n    }\n\n    onMouseDown == null ? void 0 : onMouseDown(event);\n  }, [isDisabled, isButton, onMouseDown]);\n  var handleMouseUp = useCallback(event => {\n    if (!isButton) {\n      setIsActive(false);\n    }\n\n    onMouseUp == null ? void 0 : onMouseUp(event);\n  }, [onMouseUp, isButton]);\n  var handleMouseOver = useCallback(event => {\n    if (isDisabled) {\n      event.preventDefault();\n      return;\n    }\n\n    onMouseOver == null ? void 0 : onMouseOver(event);\n  }, [isDisabled, onMouseOver]);\n  var ref = mergeRefs(htmlRef, refCallback);\n\n  if (isButton) {\n    return _extends({}, htmlProps, {\n      ref,\n      type: \"button\",\n      \"aria-disabled\": trulyDisabled ? undefined : isDisabled,\n      disabled: trulyDisabled,\n      onClick: handleClick,\n      onMouseDown,\n      onMouseUp,\n      onKeyUp,\n      onKeyDown,\n      onMouseOver\n    });\n  }\n\n  return _extends({}, htmlProps, {\n    ref,\n    role: \"button\",\n    \"data-active\": dataAttr(isActive),\n    \"aria-disabled\": !!isDisabled,\n    tabIndex: trulyDisabled ? undefined : tabIndex,\n    onClick: handleClick,\n    onMouseDown: handleMouseDown,\n    onMouseUp: handleMouseUp,\n    onKeyUp: handleKeyUp,\n    onKeyDown: handleKeyDown,\n    onMouseOver: handleMouseOver\n  });\n}","map":{"version":3,"sources":["../../src/use-clickable.ts"],"names":["props","ref","clickOnEnter","clickOnSpace","tabIndex","onMouseOver","htmlProps","useState","refCallback","useCallback","node","setIsButton","isButton","tabIndexProp","trulyDisabled","isDisabled","handleClick","event","self","onClick","handleKeyDown","onKeyDown","shouldClickOnEnter","shouldClickOnSpace","setIsActive","handleKeyUp","onKeyUp","handleMouseDown","isRightClick","onMouseDown","handleMouseUp","onMouseUp","handleMouseOver","mergeRefs","type","disabled","role","dataAttr"],"mappings":"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","sourcesContent":["import { dataAttr, isRightClick, mergeRefs } from \"@chakra-ui/utils\"\nimport {\n  ButtonHTMLAttributes,\n  HTMLAttributes,\n  KeyboardEvent,\n  MouseEvent,\n  Ref,\n  useCallback,\n  useState,\n} from \"react\"\n\nexport interface UseClickableProps extends HTMLAttributes<Element> {\n  /**\n   * If `true`, the element will be disabled.\n   * It will set the `disabled` HTML attribute\n   */\n  isDisabled?: boolean\n  /**\n   * If `true` and isDisabled, the element will\n   * have only `aria-disabled` set to `true`\n   */\n  isFocusable?: boolean\n  /**\n   * Whether or not trigger click on pressing `Enter`.\n   */\n  clickOnEnter?: boolean\n  /**\n   * Whether or not trigger click on pressing `Space`.\n   */\n  clickOnSpace?: boolean\n  ref?: Ref<HTMLElement>\n}\n\n/**\n * useClickable\n *\n * React hook that implements all the interactions of a native `button`\n * component with support for making it focusable even if it's disabled.\n *\n * It can be used with both native button elements or other elements (like `div`).\n */\nexport function useClickable(props: UseClickableProps = {}) {\n  const {\n    ref: htmlRef,\n    isDisabled,\n    isFocusable,\n    clickOnEnter = true,\n    clickOnSpace = true,\n    onMouseDown,\n    onMouseUp,\n    onClick,\n    onKeyDown,\n    onKeyUp,\n    tabIndex: tabIndexProp,\n    onMouseOver,\n    ...htmlProps\n  } = props\n  /**\n   * We'll use this to track if the element is a button element\n   */\n  const [isButton, setIsButton] = useState(true)\n\n  /**\n   * For custom button implementation, we'll use this to track when\n   * we mouse down on the button, to enable use style it's \":active\" style\n   */\n  const [isActive, setIsActive] = useState(false)\n\n  /**\n   * The ref callback that fires as soon as the dom node is ready\n   */\n  const refCallback = useCallback((node) => {\n    if (node?.tagName !== \"BUTTON\") {\n      setIsButton(false)\n    }\n  }, [])\n\n  const tabIndex = isButton ? tabIndexProp : tabIndexProp || 0\n  const trulyDisabled = isDisabled && !isFocusable\n\n  const handleClick = useCallback(\n    (event: MouseEvent) => {\n      if (isDisabled) {\n        event.stopPropagation()\n        event.preventDefault()\n        return\n      }\n\n      const self = event.currentTarget as HTMLElement\n      self.focus()\n      onClick?.(event)\n    },\n    [isDisabled, onClick],\n  )\n\n  const handleKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      onKeyDown?.(event)\n\n      if (isDisabled || event.defaultPrevented || event.metaKey) {\n        return\n      }\n\n      const shouldClickOnEnter = clickOnEnter && event.key === \"Enter\"\n      const shouldClickOnSpace = clickOnSpace && event.key === \" \"\n\n      if (!isButton && shouldClickOnSpace) {\n        event.preventDefault()\n        setIsActive(true)\n        return\n      }\n\n      if (!isButton && shouldClickOnEnter) {\n        event.preventDefault()\n        const self = event.currentTarget as HTMLElement\n        self.click()\n      }\n    },\n    [isDisabled, isButton, onKeyDown, clickOnEnter, clickOnSpace],\n  )\n\n  const handleKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      onKeyUp?.(event)\n\n      if (isDisabled || event.defaultPrevented || event.metaKey) return\n\n      const shouldClickOnSpace = clickOnSpace && event.key === \" \"\n\n      if (!isButton && shouldClickOnSpace) {\n        event.preventDefault()\n        setIsActive(false)\n\n        const self = event.currentTarget as HTMLElement\n        self.click()\n      }\n    },\n    [clickOnSpace, isButton, isDisabled, onKeyUp],\n  )\n\n  const handleMouseDown = useCallback(\n    (event: MouseEvent) => {\n      /**\n       * Prevent right-click from triggering the\n       * active state.\n       */\n      if (isRightClick(event)) return\n\n      if (isDisabled) {\n        event.stopPropagation()\n        event.preventDefault()\n        return\n      }\n\n      if (!isButton) {\n        setIsActive(true)\n      }\n\n      onMouseDown?.(event)\n    },\n    [isDisabled, isButton, onMouseDown],\n  )\n\n  const handleMouseUp = useCallback(\n    (event: MouseEvent) => {\n      if (!isButton) {\n        setIsActive(false)\n      }\n\n      onMouseUp?.(event)\n    },\n    [onMouseUp, isButton],\n  )\n\n  const handleMouseOver = useCallback(\n    (event: MouseEvent) => {\n      if (isDisabled) {\n        event.preventDefault()\n        return\n      }\n\n      onMouseOver?.(event)\n    },\n    [isDisabled, onMouseOver],\n  )\n\n  const ref = mergeRefs(htmlRef, refCallback)\n\n  if (isButton) {\n    return {\n      ...htmlProps,\n      ref,\n      type: \"button\" as ButtonHTMLAttributes<any>[\"type\"],\n      \"aria-disabled\": trulyDisabled ? undefined : isDisabled,\n      disabled: trulyDisabled,\n      onClick: handleClick,\n      onMouseDown,\n      onMouseUp,\n      onKeyUp,\n      onKeyDown,\n      onMouseOver,\n    }\n  }\n\n  return {\n    ...htmlProps,\n    ref,\n    role: \"button\",\n    \"data-active\": dataAttr(isActive),\n    \"aria-disabled\": !!isDisabled,\n    tabIndex: trulyDisabled ? undefined : tabIndex,\n    onClick: handleClick,\n    onMouseDown: handleMouseDown,\n    onMouseUp: handleMouseUp,\n    onKeyUp: handleKeyUp,\n    onKeyDown: handleKeyDown,\n    onMouseOver: handleMouseOver,\n  }\n}\n\nexport type UseClickableReturn = ReturnType<typeof useClickable>\n"]},"metadata":{},"sourceType":"module"}