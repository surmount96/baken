{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\nimport { cx, getValidChildren, mapResponsive, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nexport var StackDivider = props => {\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    className: \"chakra-stack__divider\"\n  }, props, {\n    __css: _extends({}, props.__css, {\n      borderWidth: 0,\n      alignSelf: \"stretch\",\n      borderColor: \"inherit\",\n      width: \"auto\",\n      height: \"auto\"\n    })\n  }));\n};\nexport var StackItem = props => /*#__PURE__*/React.createElement(chakra.div, _extends({\n  className: \"chakra-stack__item\"\n}, props, {\n  __css: _extends({\n    display: \"inline-block\",\n    flex: \"0 0 auto\",\n    minWidth: 0\n  }, props[\"__css\"])\n}));\n/**\n * Stacks help you easily create flexible and automatically distributed layouts\n *\n * You can stack elements in the horizontal or vertical direction,\n * and apply a space or/and divider between each element.\n *\n * It uses `display: flex` internally and renders a `div`.\n *\n * @see Docs https://chakra-ui.com/components/stack\n *\n */\n\nexport var Stack = /*#__PURE__*/forwardRef(function Stack(props, ref) {\n  var {\n    isInline,\n    direction,\n    align,\n    justify,\n    spacing = \"0.5rem\",\n    wrap,\n    children,\n    divider,\n    className,\n    shouldWrapChildren\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"isInline\", \"direction\", \"align\", \"justify\", \"spacing\", \"wrap\", \"children\", \"divider\", \"className\", \"shouldWrapChildren\"]);\n\n  var _direction = isInline ? \"row\" : direction != null ? direction : \"column\";\n  /**\n   * If we ever run into SSR issues with this, check this post to find a fix for it:\n   * @see https://medium.com/@emmenko/patching-lobotomized-owl-selector-for-emotion-ssr-5a582a3c424c\n   */\n\n\n  var selector = \"& > *:not(style) ~ *:not(style)\";\n  var directionStyles = {\n    column: {\n      mt: spacing,\n      ml: 0\n    },\n    row: {\n      ml: spacing,\n      mt: 0\n    },\n    \"column-reverse\": {\n      mb: spacing,\n      mr: 0\n    },\n    \"row-reverse\": {\n      mr: spacing,\n      mb: 0\n    }\n  };\n  var styles = {\n    flexDirection: _direction,\n    [selector]: mapResponsive(_direction, value => directionStyles[value])\n  };\n  var dividerStyles = mapResponsive(_direction, value => {\n    if (value.includes(\"row\")) {\n      return {\n        mx: spacing,\n        my: 0,\n        borderLeftWidth: \"1px\",\n        borderBottomWidth: 0\n      };\n    }\n\n    return {\n      mx: 0,\n      my: spacing,\n      borderLeftWidth: 0,\n      borderBottomWidth: \"1px\"\n    };\n  });\n  var hasDivider = !!divider;\n  var shouldUseChildren = !shouldWrapChildren && !hasDivider;\n  var validChildren = getValidChildren(children);\n  var clones = shouldUseChildren ? validChildren : validChildren.map((child, index) => {\n    var isLast = index + 1 === validChildren.length;\n\n    var _child = shouldWrapChildren ? /*#__PURE__*/React.createElement(StackItem, {\n      key: index\n    }, child) : child;\n\n    if (!hasDivider) return _child;\n    var cloneDivider = isLast ? null : /*#__PURE__*/React.cloneElement(divider, {\n      sx: _extends({\n        \"&\": dividerStyles\n      }, divider == null ? void 0 : divider.props.sx)\n    });\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      key: index\n    }, _child, cloneDivider);\n  });\n\n  var _className = cx(\"chakra-stack\", className);\n\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref,\n    display: \"flex\",\n    alignItems: align,\n    justifyContent: justify,\n    flexDirection: styles.flexDirection,\n    flexWrap: wrap,\n    className: _className,\n    __css: hasDivider ? {} : {\n      [selector]: styles[selector]\n    }\n  }, rest), clones);\n});\n\nif (__DEV__) {\n  Stack.displayName = \"Stack\";\n}\n/**\n * A view that arranges its children in a horizontal line.\n */\n\n\nexport var HStack = /*#__PURE__*/forwardRef((props, ref) => {\n  return /*#__PURE__*/React.createElement(Stack, _extends({\n    align: \"center\"\n  }, props, {\n    direction: \"row\",\n    ref: ref\n  }));\n});\n\nif (__DEV__) {\n  HStack.displayName = \"HStack\";\n}\n/**\n * A view that arranges its children in a vertical line.\n */\n\n\nexport var VStack = /*#__PURE__*/forwardRef((props, ref) => {\n  return /*#__PURE__*/React.createElement(Stack, _extends({\n    align: \"center\"\n  }, props, {\n    direction: \"column\",\n    ref: ref\n  }));\n});\n\nif (__DEV__) {\n  VStack.displayName = \"VStack\";\n}","map":{"version":3,"sources":["../../src/stack.tsx"],"names":["StackDivider","props","borderWidth","alignSelf","borderColor","width","height","StackItem","display","flex","minWidth","Stack","forwardRef","spacing","shouldWrapChildren","rest","_direction","isInline","direction","selector","directionStyles","column","mt","ml","row","mb","mr","styles","flexDirection","mapResponsive","value","dividerStyles","mx","my","borderLeftWidth","borderBottomWidth","hasDivider","shouldUseChildren","validChildren","getValidChildren","clones","isLast","index","_child","cloneDivider","sx","divider","_className","cx","HStack","ref","VStack"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  ChakraComponent,\n  forwardRef,\n  PropsOf,\n  ResponsiveValue,\n  SystemProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, getValidChildren, mapResponsive, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport type StackDirection = ResponsiveValue<\n  \"row\" | \"column\" | \"row-reverse\" | \"column-reverse\"\n>\n\ninterface StackOptions {\n  /**\n   * Shorthand for `alignItems` style prop\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * Shorthand for `justifyContent` style prop\n   */\n  justify?: SystemProps[\"justifyContent\"]\n  /**\n   * Shorthand for `flexWrap` style prop\n   */\n  wrap?: SystemProps[\"flexWrap\"]\n  /**\n   * The space between each stack item\n   */\n  spacing?: SystemProps[\"margin\"]\n  /**\n   * The direction to stack the items.\n   */\n  direction?: StackDirection\n  /**\n   * If `true`, each stack item will show a divider\n   */\n  divider?: React.ReactElement\n  /**\n   * If `true`, the children will be wrapped in a `Box` with\n   * `display: inline-block`, and the `Box` will take the spacing props\n   */\n  shouldWrapChildren?: boolean\n  /**\n   * If `true` the items will be stacked horizontally.\n   */\n  isInline?: boolean\n}\n\nexport interface StackDividerProps extends HTMLChakraProps<\"div\"> {}\n\nexport const StackDivider: ChakraComponent<\"div\"> = (props) => {\n  return (\n    <chakra.div\n      className=\"chakra-stack__divider\"\n      {...props}\n      __css={{\n        ...props.__css,\n        borderWidth: 0,\n        alignSelf: \"stretch\",\n        borderColor: \"inherit\",\n        width: \"auto\",\n        height: \"auto\",\n      }}\n    />\n  )\n}\n\nexport const StackItem: ChakraComponent<\"div\"> = (props) => (\n  <chakra.div\n    className=\"chakra-stack__item\"\n    {...props}\n    __css={{\n      display: \"inline-block\",\n      flex: \"0 0 auto\",\n      minWidth: 0,\n      ...props[\"__css\"],\n    }}\n  />\n)\n\nexport interface StackProps extends PropsOf<typeof chakra.div>, StackOptions {}\n\n/**\n * Stacks help you easily create flexible and automatically distributed layouts\n *\n * You can stack elements in the horizontal or vertical direction,\n * and apply a space or/and divider between each element.\n *\n * It uses `display: flex` internally and renders a `div`.\n *\n * @see Docs https://chakra-ui.com/components/stack\n *\n */\nexport const Stack = forwardRef<StackProps, \"div\">(function Stack(props, ref) {\n  const {\n    isInline,\n    direction,\n    align,\n    justify,\n    spacing = \"0.5rem\",\n    wrap,\n    children,\n    divider,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props\n\n  const _direction = isInline ? \"row\" : direction ?? \"column\"\n\n  /**\n   * If we ever run into SSR issues with this, check this post to find a fix for it:\n   * @see https://medium.com/@emmenko/patching-lobotomized-owl-selector-for-emotion-ssr-5a582a3c424c\n   */\n  const selector = \"& > *:not(style) ~ *:not(style)\"\n\n  const directionStyles = {\n    column: { mt: spacing, ml: 0 },\n    row: { ml: spacing, mt: 0 },\n    \"column-reverse\": { mb: spacing, mr: 0 },\n    \"row-reverse\": { mr: spacing, mb: 0 },\n  }\n\n  const styles = {\n    flexDirection: _direction,\n    [selector]: mapResponsive(_direction, (value) => directionStyles[value]),\n  }\n\n  const dividerStyles = mapResponsive(_direction, (value) => {\n    if (value.includes(\"row\")) {\n      return {\n        mx: spacing,\n        my: 0,\n        borderLeftWidth: \"1px\",\n        borderBottomWidth: 0,\n      }\n    }\n    return {\n      mx: 0,\n      my: spacing,\n      borderLeftWidth: 0,\n      borderBottomWidth: \"1px\",\n    }\n  })\n\n  const hasDivider = !!divider\n  const shouldUseChildren = !shouldWrapChildren && !hasDivider\n\n  const validChildren = getValidChildren(children)\n\n  const clones = shouldUseChildren\n    ? validChildren\n    : validChildren.map((child, index) => {\n        const isLast = index + 1 === validChildren.length\n        const _child = shouldWrapChildren ? (\n          <StackItem key={index}>{child}</StackItem>\n        ) : (\n          child\n        )\n\n        if (!hasDivider) return _child\n\n        const cloneDivider = isLast\n          ? null\n          : React.cloneElement(divider as any, {\n              sx: { \"&\": dividerStyles, ...divider?.props.sx },\n            })\n\n        return (\n          <React.Fragment key={index}>\n            {_child}\n            {cloneDivider}\n          </React.Fragment>\n        )\n      })\n\n  const _className = cx(\"chakra-stack\", className)\n\n  return (\n    <chakra.div\n      ref={ref}\n      display=\"flex\"\n      alignItems={align}\n      justifyContent={justify}\n      flexDirection={styles.flexDirection}\n      flexWrap={wrap}\n      className={_className}\n      __css={hasDivider ? {} : { [selector]: styles[selector] }}\n      {...rest}\n    >\n      {clones}\n    </chakra.div>\n  )\n})\n\nif (__DEV__) {\n  Stack.displayName = \"Stack\"\n}\n\n/**\n * A view that arranges its children in a horizontal line.\n */\nexport const HStack = forwardRef<StackProps, \"div\">((props, ref) => {\n  return <Stack align=\"center\" {...props} direction=\"row\" ref={ref} />\n})\n\nif (__DEV__) {\n  HStack.displayName = \"HStack\"\n}\n\n/**\n * A view that arranges its children in a vertical line.\n */\nexport const VStack = forwardRef<StackProps, \"div\">((props, ref) => {\n  return <Stack align=\"center\" {...props} direction=\"column\" ref={ref} />\n})\n\nif (__DEV__) {\n  VStack.displayName = \"VStack\"\n}\n"]},"metadata":{},"sourceType":"module"}