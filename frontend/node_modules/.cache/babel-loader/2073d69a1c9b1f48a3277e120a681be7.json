{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useDisclosure, useEventListener, useId } from \"@chakra-ui/hooks\";\nimport { usePopper } from \"@chakra-ui/popper\";\nimport { callAllHandlers, mergeRefs, mergeWith } from \"@chakra-ui/utils\";\nimport { useCallback, useEffect, useRef } from \"react\";\nexport function useTooltip(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    openDelay = 0,\n    closeDelay = 0,\n    closeOnClick = true,\n    closeOnMouseDown,\n    onOpen: onOpenProp,\n    onClose: onCloseProp,\n    placement,\n    id,\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    arrowSize = 10,\n    arrowShadowColor,\n    arrowPadding,\n    modifiers,\n    isDisabled,\n    gutter,\n    offset\n  } = props,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"openDelay\", \"closeDelay\", \"closeOnClick\", \"closeOnMouseDown\", \"onOpen\", \"onClose\", \"placement\", \"id\", \"isOpen\", \"defaultIsOpen\", \"arrowSize\", \"arrowShadowColor\", \"arrowPadding\", \"modifiers\", \"isDisabled\", \"gutter\", \"offset\"]);\n\n  var {\n    isOpen,\n    onOpen,\n    onClose\n  } = useDisclosure({\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onOpen: onOpenProp,\n    onClose: onCloseProp\n  });\n  var popper = usePopper({\n    placement,\n    arrowSize,\n    arrowShadowColor,\n    arrowPadding,\n    modifiers,\n    gutter,\n    offset\n  });\n  var tooltipId = useId(id, \"tooltip\");\n  var ref = useRef(null);\n  var enterTimeout = useRef();\n  var exitTimeout = useRef();\n  var openWithDelay = useCallback(() => {\n    if (!isDisabled) {\n      enterTimeout.current = window.setTimeout(onOpen, openDelay);\n    }\n  }, [isDisabled, onOpen, openDelay]);\n  var closeWithDelay = useCallback(() => {\n    if (enterTimeout.current) {\n      clearTimeout(enterTimeout.current);\n    }\n\n    exitTimeout.current = window.setTimeout(onClose, closeDelay);\n  }, [closeDelay, onClose]);\n  var onClick = useCallback(() => {\n    if (closeOnClick) {\n      closeWithDelay();\n    }\n  }, [closeOnClick, closeWithDelay]);\n  var onMouseDown = useCallback(() => {\n    if (closeOnMouseDown) {\n      closeWithDelay();\n    }\n  }, [closeOnMouseDown, closeWithDelay]);\n\n  var onKeyDown = event => {\n    if (isOpen && event.key === \"Escape\") {\n      closeWithDelay();\n    }\n  };\n\n  useEventListener(\"keydown\", onKeyDown);\n  useEffect(() => {\n    return () => {\n      clearTimeout(enterTimeout.current);\n      clearTimeout(exitTimeout.current);\n    };\n  }, []);\n  /**\n   * This allows for catching mouseleave events when the tooltip\n   * trigger is disabled. There's currently a known issue in\n   * React regarding the onMouseLeave polyfill.\n   * @see https://github.com/facebook/react/issues/11972\n   */\n\n  useEventListener(\"mouseleave\", closeWithDelay, ref.current);\n\n  var getTriggerProps = function getTriggerProps(props, _ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (_ref === void 0) {\n      _ref = null;\n    }\n\n    var triggerProps = _extends({}, props, {\n      onMouseEnter: callAllHandlers(props.onMouseEnter, openWithDelay),\n      onClick: callAllHandlers(props.onClick, onClick),\n      onMouseDown: callAllHandlers(props.onMouseDown, onMouseDown),\n      onFocus: callAllHandlers(props.onFocus, openWithDelay),\n      onBlur: callAllHandlers(props.onBlur, closeWithDelay),\n      \"aria-describedby\": isOpen ? tooltipId : undefined\n    });\n\n    return popper.getReferenceProps(triggerProps, mergeRefs(ref, _ref));\n  };\n\n  var getTooltipProps = function getTooltipProps(props, _ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (_ref === void 0) {\n      _ref = null;\n    }\n\n    var tooltipProps = _extends({\n      ref: _ref\n    }, htmlProps, props, {\n      id: tooltipId,\n      role: \"tooltip\"\n    });\n\n    return tooltipProps;\n  };\n\n  var getTooltipWrapperProps = function getTooltipWrapperProps(props, _ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (_ref === void 0) {\n      _ref = null;\n    }\n\n    return popper.getPopperProps(mergeWith(props, {\n      style: {\n        transformOrigin: popper.transformOrigin\n      }\n    }), _ref);\n  };\n\n  return {\n    isOpen,\n    show: openWithDelay,\n    hide: closeWithDelay,\n    getTriggerProps,\n    getTooltipProps,\n    getTooltipWrapperProps,\n    transformOrigin: popper.transformOrigin,\n    placement: popper.placement,\n    getArrowWrapperProps: popper.getArrowWrapperProps,\n    getArrowProps: popper.getArrowProps\n  };\n}","map":{"version":3,"sources":["../../src/use-tooltip.ts"],"names":["props","openDelay","closeDelay","closeOnClick","onOpen","onClose","isOpen","arrowSize","offset","htmlProps","useDisclosure","onCloseProp","popper","usePopper","tooltipId","useId","ref","useRef","enterTimeout","exitTimeout","openWithDelay","useCallback","window","closeWithDelay","clearTimeout","onClick","onMouseDown","onKeyDown","event","useEventListener","useEffect","getTriggerProps","_ref","triggerProps","onMouseEnter","callAllHandlers","onFocus","onBlur","undefined","mergeRefs","getTooltipProps","tooltipProps","id","role","getTooltipWrapperProps","mergeWith","style","transformOrigin","show","hide","placement","getArrowWrapperProps","getArrowProps"],"mappings":"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","sourcesContent":["import { useDisclosure, useEventListener, useId } from \"@chakra-ui/hooks\"\nimport { Placement, usePopper, UsePopperProps } from \"@chakra-ui/popper\"\nimport {\n  callAllHandlers,\n  mergeRefs,\n  mergeWith,\n  PropGetter,\n} from \"@chakra-ui/utils\"\nimport { useCallback, useEffect, useRef } from \"react\"\n\nexport interface UseTooltipProps\n  extends Pick<\n    UsePopperProps,\n    | \"arrowSize\"\n    | \"modifiers\"\n    | \"gutter\"\n    | \"offset\"\n    | \"arrowShadowColor\"\n    | \"arrowPadding\"\n  > {\n  /**\n   * Delay (in ms) before showing the tooltip\n   * @default 0ms\n   */\n  openDelay?: number\n  /**\n   * Delay (in ms) before hiding the tooltip\n   * @default 0ms\n   */\n  closeDelay?: number\n  /**\n   * If `true`, the tooltip will hide on click\n   */\n  closeOnClick?: boolean\n  /**\n   * If `true`, the tooltip will hide while the mouse\n   * is down\n   */\n  closeOnMouseDown?: boolean\n  /**\n   * Callback to run when the tooltip shows\n   */\n  onOpen?(): void\n  /**\n   * Callback to run when the tooltip hides\n   */\n  onClose?(): void\n  /**\n   * The Popper.js placement of the tooltip\n   */\n  placement?: Placement\n  /**\n   * Custom `id` to use in place of `uuid`\n   */\n  id?: string\n  /**\n   * If `true`, the tooltip will be shown (in controlled mode)\n   */\n  isOpen?: boolean\n  /**\n   * If `true`, the tooltip will be initially shown\n   */\n  defaultIsOpen?: boolean\n  isDisabled?: boolean\n}\n\nexport function useTooltip(props: UseTooltipProps = {}) {\n  const {\n    openDelay = 0,\n    closeDelay = 0,\n    closeOnClick = true,\n    closeOnMouseDown,\n    onOpen: onOpenProp,\n    onClose: onCloseProp,\n    placement,\n    id,\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    arrowSize = 10,\n    arrowShadowColor,\n    arrowPadding,\n    modifiers,\n    isDisabled,\n    gutter,\n    offset,\n    ...htmlProps\n  } = props\n\n  const { isOpen, onOpen, onClose } = useDisclosure({\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onOpen: onOpenProp,\n    onClose: onCloseProp,\n  })\n\n  const popper = usePopper({\n    placement,\n    arrowSize,\n    arrowShadowColor,\n    arrowPadding,\n    modifiers,\n    gutter,\n    offset,\n  })\n\n  const tooltipId = useId(id, \"tooltip\")\n\n  const ref = useRef<any>(null)\n\n  const enterTimeout = useRef<number>()\n  const exitTimeout = useRef<number>()\n\n  const openWithDelay = useCallback(() => {\n    if (!isDisabled) {\n      enterTimeout.current = window.setTimeout(onOpen, openDelay)\n    }\n  }, [isDisabled, onOpen, openDelay])\n\n  const closeWithDelay = useCallback(() => {\n    if (enterTimeout.current) {\n      clearTimeout(enterTimeout.current)\n    }\n    exitTimeout.current = window.setTimeout(onClose, closeDelay)\n  }, [closeDelay, onClose])\n\n  const onClick = useCallback(() => {\n    if (closeOnClick) {\n      closeWithDelay()\n    }\n  }, [closeOnClick, closeWithDelay])\n\n  const onMouseDown = useCallback(() => {\n    if (closeOnMouseDown) {\n      closeWithDelay()\n    }\n  }, [closeOnMouseDown, closeWithDelay])\n\n  const onKeyDown = (event: KeyboardEvent) => {\n    if (isOpen && event.key === \"Escape\") {\n      closeWithDelay()\n    }\n  }\n\n  useEventListener(\"keydown\", onKeyDown)\n\n  useEffect(() => {\n    return () => {\n      clearTimeout(enterTimeout.current)\n      clearTimeout(exitTimeout.current)\n    }\n  }, [])\n\n  /**\n   * This allows for catching mouseleave events when the tooltip\n   * trigger is disabled. There's currently a known issue in\n   * React regarding the onMouseLeave polyfill.\n   * @see https://github.com/facebook/react/issues/11972\n   */\n  useEventListener(\"mouseleave\", closeWithDelay, ref.current)\n\n  const getTriggerProps: PropGetter = (props = {}, _ref = null) => {\n    const triggerProps = {\n      ...props,\n      onMouseEnter: callAllHandlers(props.onMouseEnter, openWithDelay),\n      onClick: callAllHandlers(props.onClick, onClick),\n      onMouseDown: callAllHandlers(props.onMouseDown, onMouseDown),\n      onFocus: callAllHandlers(props.onFocus, openWithDelay),\n      onBlur: callAllHandlers(props.onBlur, closeWithDelay),\n      \"aria-describedby\": isOpen ? tooltipId : undefined,\n    }\n\n    return popper.getReferenceProps(triggerProps, mergeRefs(ref, _ref))\n  }\n\n  const getTooltipProps: PropGetter = (props = {}, _ref = null) => {\n    const tooltipProps = {\n      ref: _ref,\n      ...htmlProps,\n      ...props,\n      id: tooltipId,\n      role: \"tooltip\",\n    }\n\n    return tooltipProps\n  }\n\n  const getTooltipWrapperProps: PropGetter = (props = {}, _ref = null) =>\n    popper.getPopperProps(\n      mergeWith(props, {\n        style: { transformOrigin: popper.transformOrigin },\n      }),\n      _ref,\n    )\n\n  return {\n    isOpen,\n    show: openWithDelay,\n    hide: closeWithDelay,\n    getTriggerProps,\n    getTooltipProps,\n    getTooltipWrapperProps,\n    transformOrigin: popper.transformOrigin,\n    placement: popper.placement,\n    getArrowWrapperProps: popper.getArrowWrapperProps,\n    getArrowProps: popper.getArrowProps,\n  }\n}\n\nexport type UseTooltipReturn = ReturnType<typeof useTooltip>\n"]},"metadata":{},"sourceType":"module"}