{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useBoolean, useControllableProp } from \"@chakra-ui/hooks\";\nimport { ariaAttr, callAllHandlers, dataAttr, mergeRefs } from \"@chakra-ui/utils\";\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\";\nimport { useCallback, useRef, useState } from \"react\";\n/**\n * @todo use the `useClickable` hook here\n * to manage the isFocusable & isDisabled props\n */\n\nexport function useRadio(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    defaultIsChecked,\n    isChecked: isCheckedProp,\n    isFocusable,\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    onChange,\n    isInvalid,\n    name,\n    value,\n    id\n  } = props,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"defaultIsChecked\", \"isChecked\", \"isFocusable\", \"isDisabled\", \"isReadOnly\", \"isRequired\", \"onChange\", \"isInvalid\", \"name\", \"value\", \"id\"]);\n\n  var [isFocused, setFocused] = useBoolean();\n  var [isHovered, setHovering] = useBoolean();\n  var [isActive, setActive] = useBoolean();\n  var ref = useRef(null);\n  var [isCheckedState, setChecked] = useState(Boolean(defaultIsChecked));\n  var [isControlled, isChecked] = useControllableProp(isCheckedProp, isCheckedState);\n\n  var handleChange = event => {\n    if (isReadOnly || isDisabled) {\n      event.preventDefault();\n      return;\n    }\n\n    if (!isControlled) {\n      setChecked(event.target.checked);\n    }\n\n    onChange == null ? void 0 : onChange(event);\n  };\n\n  var trulyDisabled = isDisabled && !isFocusable;\n  var onKeyDown = useCallback(event => {\n    if (event.key === \" \") {\n      setActive.on();\n    }\n  }, [setActive]);\n  var onKeyUp = useCallback(event => {\n    if (event.key === \" \") {\n      setActive.off();\n    }\n  }, [setActive]);\n\n  var getCheckboxProps = function getCheckboxProps(props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({}, props, {\n      ref,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-readonly\": dataAttr(isReadOnly),\n      \"aria-hidden\": true,\n      onMouseDown: callAllHandlers(props.onMouseDown, setActive.on),\n      onMouseUp: callAllHandlers(props.onMouseUp, setActive.off),\n      onMouseEnter: callAllHandlers(props.onMouseEnter, setHovering.on),\n      onMouseLeave: callAllHandlers(props.onMouseLeave, setHovering.off)\n    });\n  };\n\n  var getInputProps = function getInputProps(props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n\n    return _extends({}, props, {\n      ref: mergeRefs(forwardedRef, ref),\n      type: \"radio\",\n      name,\n      value,\n      id,\n      onChange: callAllHandlers(props.onChange, handleChange),\n      onBlur: callAllHandlers(props.onBlur, setFocused.off),\n      onFocus: callAllHandlers(props.onFocus, setFocused.on),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onKeyUp: callAllHandlers(props.onKeyUp, onKeyUp),\n      \"aria-required\": ariaAttr(isRequired),\n      checked: isChecked,\n      disabled: trulyDisabled,\n      readOnly: isReadOnly,\n      \"aria-invalid\": ariaAttr(isInvalid),\n      \"aria-disabled\": ariaAttr(isDisabled),\n      style: visuallyHiddenStyle\n    });\n  };\n\n  var getLabelProps = function getLabelProps(props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({}, props, {\n      ref,\n      onMouseDown: callAllHandlers(props.onMouseDown, stop),\n      onTouchStart: callAllHandlers(props.onTouchStart, stop),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid)\n    });\n  };\n\n  return {\n    state: {\n      isInvalid,\n      isFocused,\n      isChecked,\n      isActive,\n      isHovered,\n      isDisabled,\n      isReadOnly,\n      isRequired\n    },\n    getCheckboxProps,\n    getInputProps,\n    getLabelProps,\n    htmlProps\n  };\n}\n/**\n * Prevent `onBlur` being fired when the checkbox label is touched\n */\n\nfunction stop(event) {\n  event.preventDefault();\n  event.stopPropagation();\n}","map":{"version":3,"sources":["../../src/use-radio.ts"],"names":["props","isChecked","id","htmlProps","useBoolean","ref","useRef","useState","Boolean","useControllableProp","handleChange","event","isReadOnly","setChecked","onChange","trulyDisabled","isDisabled","onKeyDown","useCallback","setActive","onKeyUp","getCheckboxProps","dataAttr","onMouseDown","callAllHandlers","onMouseUp","onMouseEnter","setHovering","onMouseLeave","getInputProps","forwardedRef","mergeRefs","type","onBlur","setFocused","onFocus","ariaAttr","checked","disabled","readOnly","style","visuallyHiddenStyle","getLabelProps","onTouchStart","state","isRequired"],"mappings":"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","sourcesContent":["import { useBoolean, useControllableProp } from \"@chakra-ui/hooks\"\nimport {\n  ariaAttr,\n  callAllHandlers,\n  dataAttr,\n  mergeRefs,\n  PropGetter,\n} from \"@chakra-ui/utils\"\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\"\nimport {\n  ChangeEvent,\n  SyntheticEvent,\n  useCallback,\n  useRef,\n  useState,\n} from \"react\"\n\n/**\n * @todo use the `useClickable` hook here\n * to manage the isFocusable & isDisabled props\n */\nexport interface UseRadioProps {\n  /**\n   * id assigned to input\n   */\n  id?: string\n  /**\n   * The name of the input field in a radio\n   * (Useful for form submission).\n   */\n  name?: string\n  /**\n   * The value to be used in the radio button.\n   * This is the value that will be returned on form submission.\n   */\n  value?: string | number\n  /**\n   * If `true`, the radio will be checked.\n   * You'll need to pass `onChange` to update it's value (since it's now controlled)\n   */\n  isChecked?: boolean\n  /**\n   * If `true`, the radio will be initially checked.\n   */\n  defaultIsChecked?: boolean\n  /**\n   * If `true`, the radio will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true` and `isDisabled` is true, the radio will remain\n   * focusable but not interactive.\n   */\n  isFocusable?: boolean\n  /**\n   * If `true`, the radio will be read-only\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the radio button will be invalid. This sets `aria-invalid` to `true`.\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the radio button will be invalid. This sets `aria-invalid` to `true`.\n   */\n  isRequired?: boolean\n  /**\n   * Function called when checked state of the `input` changes\n   */\n  onChange?: (event: ChangeEvent<HTMLInputElement>) => void\n}\n\nexport function useRadio(props: UseRadioProps = {}) {\n  const {\n    defaultIsChecked,\n    isChecked: isCheckedProp,\n    isFocusable,\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    onChange,\n    isInvalid,\n    name,\n    value,\n    id,\n    ...htmlProps\n  } = props\n\n  const [isFocused, setFocused] = useBoolean()\n  const [isHovered, setHovering] = useBoolean()\n  const [isActive, setActive] = useBoolean()\n\n  const ref = useRef<HTMLInputElement>(null)\n\n  const [isCheckedState, setChecked] = useState(Boolean(defaultIsChecked))\n\n  const [isControlled, isChecked] = useControllableProp(\n    isCheckedProp,\n    isCheckedState,\n  )\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (isReadOnly || isDisabled) {\n      event.preventDefault()\n      return\n    }\n\n    if (!isControlled) {\n      setChecked(event.target.checked)\n    }\n\n    onChange?.(event)\n  }\n\n  const trulyDisabled = isDisabled && !isFocusable\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive.on()\n      }\n    },\n    [setActive],\n  )\n\n  const onKeyUp = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive.off()\n      }\n    },\n    [setActive],\n  )\n\n  const getCheckboxProps: PropGetter = (props = {}, ref = null) => ({\n    ...props,\n    ref,\n    \"data-active\": dataAttr(isActive),\n    \"data-hover\": dataAttr(isHovered),\n    \"data-disabled\": dataAttr(isDisabled),\n    \"data-invalid\": dataAttr(isInvalid),\n    \"data-checked\": dataAttr(isChecked),\n    \"data-focus\": dataAttr(isFocused),\n    \"data-readonly\": dataAttr(isReadOnly),\n    \"aria-hidden\": true,\n    onMouseDown: callAllHandlers(props.onMouseDown, setActive.on),\n    onMouseUp: callAllHandlers(props.onMouseUp, setActive.off),\n    onMouseEnter: callAllHandlers(props.onMouseEnter, setHovering.on),\n    onMouseLeave: callAllHandlers(props.onMouseLeave, setHovering.off),\n  })\n\n  const getInputProps: PropGetter<HTMLInputElement> = (\n    props = {},\n    forwardedRef = null,\n  ) => ({\n    ...props,\n    ref: mergeRefs(forwardedRef, ref),\n    type: \"radio\",\n    name,\n    value,\n    id,\n    onChange: callAllHandlers(props.onChange, handleChange),\n    onBlur: callAllHandlers(props.onBlur, setFocused.off),\n    onFocus: callAllHandlers(props.onFocus, setFocused.on),\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n    onKeyUp: callAllHandlers(props.onKeyUp, onKeyUp),\n    \"aria-required\": ariaAttr(isRequired),\n    checked: isChecked,\n    disabled: trulyDisabled,\n    readOnly: isReadOnly,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"aria-disabled\": ariaAttr(isDisabled),\n    style: visuallyHiddenStyle,\n  })\n\n  const getLabelProps: PropGetter = (props = {}, ref = null) => {\n    return {\n      ...props,\n      ref,\n      onMouseDown: callAllHandlers(props.onMouseDown, stop),\n      onTouchStart: callAllHandlers(props.onTouchStart, stop),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid),\n    }\n  }\n\n  return {\n    state: {\n      isInvalid,\n      isFocused,\n      isChecked,\n      isActive,\n      isHovered,\n      isDisabled,\n      isReadOnly,\n      isRequired,\n    },\n    getCheckboxProps,\n    getInputProps,\n    getLabelProps,\n    htmlProps,\n  }\n}\n\n/**\n * Prevent `onBlur` being fired when the checkbox label is touched\n */\nfunction stop(event: SyntheticEvent) {\n  event.preventDefault()\n  event.stopPropagation()\n}\n\nexport type UseRadioReturn = ReturnType<typeof useRadio>\n"]},"metadata":{},"sourceType":"module"}